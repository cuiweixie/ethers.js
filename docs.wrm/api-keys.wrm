_section: Provider API Keys @<api-keys>

//( **太长不看版：** &ndash; 使用下面的链接注册来获得您自己的API密钥，以提高您的应用程序性能 )//

当使用由API服务商(例如[[link-alchemy]],[[link-etherscan]] 或 [[link-infura]])支持的[[Provider]]时, 他们都需要一个API密钥，从而能够跟踪每个项目及其使用和权限。

ethers.js 库 为上述的API服务商提供了默认的API密钥，因此每个[[Provider]]都可以轻松地连接————开箱即用。

这些API密钥是由后端服务作为社区资源提供的，用于低流量项目和早期原型开发。

因为这些API键是由所有用户共享的(没有获得自己的API密钥)，所以它们被经常被使用，这意味着重新请求发生得更频繁，响应也更慢。

**强烈建议**你从下列的API服务商注册一个免费的API密钥，这有很多好处（可能有些差别，这取决于具体的API服务商）:

- 更**高**的请求速率和并发请求限制
- 更**快**的响应，更少的重连和超时
- 在用于性能调优和分析客户行为具有更**优秀**的指标追踪
- 更**高级**的api，例如归档数据或高级日志查询

_subsection: Etherscan @<api-keys--etherscan>

Etherscan is an Ethereum block explorer, which is possibly the most useful
developer tool for building and debugging Ethereum applications.

They offer an extensive collection of API endpoints which provide all the
operations required to interact with the Ethereum Blockchain.

[Sign up for a free API key on Etherscan](link-etherscan-signup)

**Benefits:**

- higher rate limit (since you are not using the [shared rate limit](link-etherscan-ratelimit))
- customer usage metrics

_subsection: INFURA @<api-keys--infura>

The INFURA service has been around for quite some time and is very robust
and reliable and highly recommended.

They offer a standard JSON-RPC interface and a WebSocket interface, which makes
interaction with standard tools versatile, simple and straight forward.

[Sign up for a free Project ID on INFURA](link-infura-signup)

**Benefits:**

- higher rate limit
- customer usage metrics
- access to archive data (requires paid upgrade)

_subsection: Alchemy @<api-keys--alchemy>

The Alchemy service has been around a few years and is also very robust
and reliable.

They offer a standard JSON-RPC interface and a WebSocket interface, as well
as a collection of advanced APIs for interacting with tokens and to assist
with debugging.

[Sign up for a free API key on Alchemy](link-alchemy-signup)

**Benefits:**

- higher rate limit
- customer usage metrics
- access to advanced token balance and metadata APIs
- access to advanced debugging trace and revert reason APIs

_subsection: Pocket Gateway@<api-keys--pocket-gateway>


[Sign up for a free API key on Pocket](link-pocket-signup)

**Benefits:**

- customer usage metrics
- decentralized Access to Blockchain Infrastructure
- Stake as opposed to paying a monthly fee
- Highly redundant global set of nodes incentivized by cryptoeconomic incentives


_subsection: Creating a Default Provider @<api-keys--getDefaultProvider>

The [default provider](providers-getDefaultProvider) connects to multiple
backends and verifies their results internally, making it simple to have
a high level of trust in third-party services.

A second optional parameter allows API keys to be specified to each
Provider created internally and any API key omitted will fallback onto
using the default API key for that service.

It is **highly recommended** that you provide an API for each service, to
maximize your applications performance.

_code: Passing API Keys into getDefaultProvider @lang<script>

// Use the mainnet
const network = "homestead";

// Specify your own API keys
// Each is optional, and if you omit it the default
// API key for that service will be used.
const provider = ethers.getDefaultProvider(network, {
    etherscan: YOUR_ETHERSCAN_API_KEY,
    infura: YOUR_INFURA_PROJECT_ID,
    // Or if using a project secret:
    // infura: {
    //   projectId: YOUR_INFURA_PROJECT_ID,
    //   projectSecret: YOUR_INFURA_PROJECT_SECRET,
    // },
    alchemy: YOUR_ALCHEMY_API_KEY,
    pocket: YOUR_POCKET_APPLICATION_KEY
    // Or if using an application secret key:
    // pocket: {
    //   applicationId: ,
    //   applicationSecretKey:
    // }
});
