_section: Contributing and Hacking @<contributing>

我编写ethers.js库是出于需要的，并且随着时间的推移已经有组织的发展起来。

很多事情都是有原因的(至少在当时)，但我总是欢迎批评，并且完全愿意改变我对事情的看法。

申请拉取代码请求, 不过请记住几点:

- 破坏后向兼容性的改变将不会被接受；它们可能主要考虑的是下一个主要版本
- Security is important; adding dependencies require fairly convincing
  arguments as to why
- 这个库的目标是精简,所以在修改之前和之后都要注意dist/ether.min.js文件的大小
- 保持PR简单易读; 只修改 ``docs.wrm/``和``packages/*/src.ts/`` 文件夹中的文件,因为这样可以方便地验证更改
- 为预期的和意外的输入添加测试用例
- 任何新特性都需要我的支持(未来问题、文档、测试、迁移)，所以任何过于复杂或特定的特性都可能不被接受

一般来说, **在开始一个pull请求//之前//请先提出一个问题**, 这样我们可以进行公开讨论，找出解决问题/功能的最佳办法**:)**


_subsection: Building @<contributing--building>

不巧的是，以太坊的构建过程并不是超级简单的，但我已经试图使它尽可能的简单化。

这是一个mono repo，它试图与大量环境、构建工具和平台兼容，这就是为什么它必须做一些奇怪的事情

``misc/admin``文件夹中有几个自定义脚本可以帮助管理monorepo。开发人员通常不需要担心这些问题，因为 它们都是被``npm 运行脚本`` 操作包裹封装的。

_code: Installing @lang<shell>

# Clone the repository
/home/ricmoo> git clone https://github.com/ethers-io/ethers.js.git

/home/ricmoo> cd ethers.js

# Install all dependencies:
# - Hoists all sub-package dependencies in the package.json (preinstall)
# - Installs all the (hoisted) dependencies and devDependencies (install)
# - Build the rat-nests (in .package_node_modules) (postinstall)
# - Create a dependency graph for the TypeScript (postinstall)
# - Link the rat-nets into each project (postinstall)
/home/ricmoo/ethers.js> npm install

_heading: Making Changes @<contributing--updating>

一旦你的环境设置好, 你应该能够简单地开启``自动构建``特性,并且能够修改TypeScript源代码.

_code: Watching and Building @lang<shell>

# 开始观察文件并在文件发生变化时重新构建
/home/ricmoo/ethers.js> npm run auto-build

# 或者如果你不想观察而只是构建
/home/ricmoo/ethers.js> npm run build

_heading: 创建浏览器适用的软件

要创建可以直接在浏览器中使用的文件,需要建立分布式的文件(位于``packages/ethers/dist``)需要被构建，这需要几个中间的构建、脚本和对于各种rollup脚本的执行.

_code: Building Distribution Files @lang<shell>

# 如果你需要重构所有的库(esm + cjs)和dist文件
# 注意:这需要node 10或者更新的

/home/ricmoo/ethers.js> npm run build-all

_heading: Testing

_code: Testing @lang<shell>

# 重构所有文件(npm run build-all)同时捆绑测试用例进行测试
/home/ricmoo/ethers.js> npm test

# Often you don't need the full CI experience
/home/ricmoo/ethers.js> npm run test-node

_heading: Distribution

Most developers should not ever require this step, but for people
forking ethers and creating alternates (for example if you have
a non-EVM compatible chain but are trying to reuse this package).

This script will rebuild the entire ethers project, compare it
against npm, re-write package versions, update internal hashes,
re-write various TypeScript files (to get around some ES+TS
limitations for Tree Shaking and linking), re-write map files,
bundle stripped versions of dependencies and basically just a
whole bunch of stuff.

If you use this and get stuck, [message me](link-mail).

_code: Preparing the Distribution @lang<shell>

# Prepare all the distribution files
# - Remove all generated files (i.e. npm run clean)
# - Re-install all dependencies, hoisting, etc. (npm install)
# - Spell check all strings in every TypeScript files
# - Build everything from scratch with this clean install
# - Compare local with npm, bumping the version if changed
# - Build everything again (with the updated versions)
# - Update the CHANGELOG.md with the git history since the last change
/home/ricmoo/ethers.js> npm run update-version

_note: Do NOT check in dist files in a PR

For Pull Requests, please ONLY commit files in the ``docs.wrm/`` and
``packages/*/src.ts/`` folders. I will prepare the distribution builds
myself and keeping the PR relevant makes it easier to verify the changes.

_heading: Publishing

Again, this should not be necessary for most developers. This step
requires using the ``misc/admin/cmds/config-set`` script for a number
of values, including private keys, NPM session keys, AWS access keys,
GitHub API tokens, etc.

The config file is encrypted with about 30 seconds of scrypt password-based
key derivation function, so brute-forcing the file is quite expensive.

The config file also contains a plain-text mnemonic. This is a money-pot.
Place a tempting amount of ether or Bitcoin on this account and set up an
e-mail alert for this account.

If any attacker happens across your encrypted config, they will have instant
access to the plain-text mnemonic, so they have the option to immediately
steal the ether (i.e. the responsible-disclosure bond).

If you ever see this ether taken, your encrypted file is compromised! Rotate
all your AWS keys, NPM session keys, etc. immedately.

@TODO: document all the keys that need to be set for each step

_code: Preparing the Distribution @lang<shell>

# Publish
# - Update any changed packages to NPM
# - Create a release on GitHub with the latest CHANGELOG.md description
# - Upload the bundled files the the CDN
# - Flush the CDN edge caches
/home/ricmoo/ethers.js> npm run publish-all


_subsection: Documentation @<contributing--documentation>

The documents are generated using [Flatworm](flatworm) documentation
generation tool, which was written for the purpose of writing the documentation
for ethers.

Style Guide (this section will have much more coming):

- Try to keep lines no longer than //around// 80 characters
- Avoid inline links in the source; use the ``externalLinks`` field in the config.js
- Prefix external links with ``link-``
- Changing an anchor name must be well justified, as it will break all existing links
  to that section; flatworm will support symlinks in the future
- In general, I aim for consistency; look to similar situations throughout the documentation


_heading: Building

To build the documentation, you should first follow the
[above steps](contributing--building) to build the ethers library.

Building the docs will generate several types of output:

- A full set of HTML pages, linking across each other
- A single one-page HTML page with all pages linking to local anchors
- A full set of README.md pages organized to be browsable and linkable in GitHub
- A metadata dump for tool ingestion (still needs more work)
- (@TODO; only half done) The documentation as a LaTeX and generated PDF

_code: Building the Documentations @lang<shell>

/home/ricmoo/ethers.js> npm run build-docs


_heading: Evaluation

When building the documentation, all code samples are run through a JavaScript
VM to ensure there are no typos in the example code, as well the exact output
of results are injected into the output, so there is no need to keep the results
and code in-sync.

However, this can be a bit of a headache when making many small changes, so to
build the documentation faster, you can skip the evaluation step, which will
inject the code directly.

_code: Build docs skipping evaluation @lang<shell>

/home/ricmoo/ethers.js> npm run build-docs -- --skip-eval


_heading: Previewing Changes

To preview the changes locally, you can use any standard web server and run
from the ``/docs/`` folder, or use the built-in web server.

The same caveats as normal web development apply, such flushing browser
caches after changing (and re-building) the docs.

_code: Running a webserver @lang<shell>

/home/ricmoo/ethers.js> npm run serve-docs
