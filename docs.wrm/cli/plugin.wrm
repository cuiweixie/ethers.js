_section: Making Your Own @<cli-diy>

//cli//库的目的是方便您自己创建自己ID命令行工具

_subsection: CLI @<cli-cli> @SRC<cli:class.CLI>

一个**CLI**处理所有命令行标志、选项和参数的解析,并且实例化一个[[cli-plugin]]来处理命令

一个**CLI**可以支持多个[[cli-plugin]]在这种情况下，第一个参数被用来决定运行哪一个 (如果没有参数,将选择默认的插件) ，或者可以被设计成独立的, 
在这种情况下，正好可以使用一个[[cli-plugin]]并且不允许有命令参数。


_property: addPlugin(command, pluginClass) => void  @<cli-addplugin> @SRC<cli/cli>
为//command//添加一个//plugin//类。在所有选项和标志被使用后，第一个参数将被使用，相关的插件类将被实例化并运行。

_property: setPlugin(pluginClass) => void  @<cli-setplugin> @SRC<cli/cli>
设置一个专门的[[cli-plugin]]类，将处理所有的输入。 它不能与addPlugin一起使用，也不会自动接受参数中的命令。

_property: showUsage([ message = "" [ , status = 0 ] ]) => never  @<cli-showusage> @SRC<cli/cli>
显示CLI的使用帮助屏幕并终止。

_property: run(args) => Promise<void>  @<cli-run> @SRC<cli/cli:CLI.run>
通常传入的//args//数值将会是``process.argv.slice(2)``.


_subsection: Plugin  @<cli-plugin> @SRC<cli:class.Plugin>

每个**Plugin**管理CLI的每一条命令并且分阶段执行。

如果使用CLI的请求(i.e. 即帮助), 则使用静态方法``getHelp``和``getOptionHelp``用来生成帮助界面

Otherwise, a plugin is instantiated and the ``prepareOptions`` is called. Each
plugin **must** call ``super.prepareOptions``, otherwise the basic options are
not yet processed. During this time a Plugin should consume all the flags and
options it understands, since any left over flags or options will cause the
CLI to bail and issue an //unknown option// error. This should throw if a value
for a given option is invalid or some combination of options and flags is not
allowed.

一旦prepareOptions完成(the returned promise is resolved), 就会调用``prepareArguments``。这应该验证预期参数的数量，如果有太多或者太少，或者任何参数没有意义，则抛出一个错误。

一旦prepareArguments完成(the returned promise is resolved), 则会调用 ``run``。

_property: plugin.network => [[providers-Network]]
这个插件运行的网络

_property: plugin.provider => [[Provider]]
这个插件运行的provider对象

_property: plugin.accounts => Array<[[Signer]]>
使用这个插件可以使用``--account``,``--account-rpc``和``--account-void`` 传递给插件的账户

_property: plugin.gasLimit => [[BigNumber]]
这个插件应该使用的gas限额。如果未指定则为空。

_property: plugin.gasPrice => [[BigNumber]]
这个插件应该使用的gas价格。如果未指定则为空。

_property: plugin.nonce => number
这个插件用户应该使用的初始nonce。


_heading: 方法

_property: plugin.prepareOptions(argParser [ , verifyOnly = false ]) => Promise<void>  @<plugin-prepareoptions> @SRC<cli/cli:Plugin.prepareOptions>

_property: plugin.prepareArgs(args) =>  Promise<void>  @<plugin-prepareargs> @SRC<cli/cli>

_property: plugin.run() => Promise<void>  @<plugin-run> @SRC<cli/cli:Plugin.run>

_property: plugin.getAddress(addressOrName [ , message = "", [ allowZero = false ] ]) => Promise<string>  @<plugin-getaddress> @SRC<cli/cli:Plugin.getAddress>
插件应该使用这种方法来解析地址。如果解析的地址是零地址，并且//allowZero//不是真值, 则会引发错误。

_property: plugin.dump(header, info) => void  @<plugin-dump> @SRC<cli/cli:Plugin.dump>
将//info//以良好的格式风格转储到console控制台，并带有//header//。以后的话，插件可能会支持自动使用该方法的JSON输出格式。

_property: plugin.throwUsageError([ message = "" ]) => never  @<plugin-throwusageerror> @SRC<cli/cli>
停止插件的执行，显示插件的帮助屏幕，带有可选的//信息//.

_property: plugin.throwError(message) => never  @<plugin-throwerror> @SRC<cli/cli>
停止插件的执行，显示//信息//.

_heading: 静态方法

_property: Plugin.getHelp => Help  @<plugin-gethelp> @SRC<cli/cli>
每个子类都应该实现这个静态方法用于生成帮助屏幕

_property: Plugin.getOptionHelp => Array<Help>  @<plugin-getoptionshelp> @SRC<cli/cli>
如果它支持用于生成帮助屏幕的附加选项，每个子类都应该实现这个静态方法。


_subsection: ArgParser @<cli-argparser> @SRC<cli:class.ArgParser>

**ArgParser** is used to 用来将一条命令行解析成标志, 选项和参数。

_code: @lang<shell>

/home/ethers> ethers --account wallet.json --yes send ricmoo.eth 1.0
#  An Option ----------^                     ^   ^
#    - name =  "account"                     |   |
#    - value = "wallet.json"                 |   |
#  A Flag -----------------------------------+   |
#    - name  = "yes"                             |
#    - value = true                              |
#  Arguments ------------------------------------+
#    - count = 3
#    - [ "send", "ricmoo.eth", "1.0" ]

_null:

Flags 是一个简单的二进制选项(例如``--yes``), 如果存在则为真，否则的话为假

选项在一个命令行中需要带一个参数
(例如``--account wallet.json``, 它有名字``account`` 和它的值``wallet.json``)

参数是命令行中所有其他值,而并不是通过**ArgParser**直接访问的.

当一个CLI在运行的时候, an **ArgParser** is used to validate the command line by using
prepareOptions, which consumes all flags and options leaving only the arguments
behind, which are then passed into prepareArgs.

_property: argParser.consumeFlag(name) => boolean  @<argparser-consumeflag> @SRC<cli/cli>
删除标签//name//，如果存在，返回true

_property: argParser.consumeMultiOptions(names) => Array<{ name: string, value: string}>  @<argparser-consumemultioptions> @SRC<cli/cli>
Remove all options which match any name in the Array of //names// with their values returning the list (in order) of values.
删除所有与//names//数组中的任何名称相匹配的选项，其值返回值的列表（按顺序）。
_property: argParser.consumeOption(name) => string  @<argparser-consumeoption> @SRC<cli/cli>
删除带有//name//值的选项，并返回该值。如果该选项被多次包含，这将抛出一个UsageError。
_property: argParser.consumeOptions(name) => Array<string>  @<argparser-consumeoptions> @SRC<cli/cli>
删除所有选项及其对//name//的值，并返回（按顺序）值的列表。
