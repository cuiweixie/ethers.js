_section: 抽象语法树(Abstract Syntax Tree) @<asm-ast>
使用[Ethers ASM Dialect](asm-dialect)去解析文件将生成一个抽象语法树。
根节点将始终是name为``_``的[[asm-scopenode]]。

要将文件解析为抽象语法树，请使用[parse](asm-parse)函数。

_subsection: 类型

_heading: 位置(Location) @<asm-location>

_property: offset => number
源代码中到此节点的开始处的偏移量。

_property: length => number
源代码中到此节点末尾的字符长度。

_property: source => string
此节点的源代码。

_subsection: 节点(Nodes)

@TODO: 在这里放置一个显示层次结构的图表

_heading: 节点 @<asm-node> @SRC<asm:class.Node>

_property: node.tag => string
程序生命周期中此节点的唯一标记。

_property: node.location => [[asm-location]]
此节点所表示的源代码，和该节点在源代码中的位置(location)。

_heading: ValueNode @<asm-valuenode> @INHERIT<[[asm-node]]> @SRC<asm:class.ValueNode>
一个 **ValueNode(值节点)** 是一个可以操作堆栈的节点。

_heading: LiteralNode @<asm-literalnode> @INHERIT<[[asm-valuenode]]> @SRC<asm:class.LiteralNode>

_property: literalNode.value => string
此节点的文字值，可以是[[DataHexString]]或十进制数的字符串。

_property: literalNode.verbatim => boolean
在[[asm-datanode]]上下文中，这是true，
因为在这种情况下，值应该逐字取，不应该添加``PUSH``操作，否则为false。


_heading: PopNode @<asm-popnode> @INHERIT<[[asm-valuenode]]> @SRC<asm:class.PopNode>
**PopNode**用于存储栈中隐式弹出的占位符。
它表示隐式占位符(例如``$$``)或显式占位符(例如``$1``)的代码，它表示要预期要使用的堆栈位置。

_property: literalNode.index => number
这个**PopNode**所代表的索引。对于隐式占位符是``0``。

_heading: LinkNode @<asm-linknode> @INHERIT<[[asm-valuenode]]> @SRC<asm:class.LinkNode>
**LinkNode(链接节点)** 表示到另一个[[asm-node]]数据的链接，例如``$foo``或``#bar``。

_property: linkNode.label => string
目标节点的名称。

_property: linkNode.type => "offset" | "length"
表示此节点是用于目标节点的偏移值还是长度值。

_heading: OpcodeNode @<asm-opcodenode> @INHERIT<[[asm-valuenode]]> @SRC<asm:class.OpcodeNode>

_property: opcodeNode.opcode => [[asm-opcode]]
此节点的操作码。

_property: opcodeNode.operands => Array<[[asm-valuenode]]>
传递到此节点的所有操作数(operands)的列表。

_heading: EvaluationNode @<asm-evaluationnode> @INHERIT<[[asm-valuenode]]> @SRC<asm:class.EvaluationNode>
**EvaluationNode**用于执行代码和插入结果，但不生成任何输出程序集，使用``{{! code here }}``语法。

_property: literalNode.verbatim => boolean
在[[asm-datanode]]上下文中，这是true，
因为在这种情况下，值应该逐字取，不应该添加``PUSH``操作，否则为false。

_property: evaluationNode.script => string
一段用于计算和生成结果以作为文字使用的代码。

_heading: ExecutionNode @<asm-executionnode> @INHERIT<[[asm-node]]> @SRC<asm:class.ExecutionNode>

**ExecutionNode** 用于执行代码，但不生成任何输出程序集，使用``{{! code here }}``语法。

_property: evaluationNode.script => string
要执行的代码。任何结果(result)都会被忽略。

_heading: LabelledNode @<asm-labellednode> @INHERIT<[[asm-node]]> @SRC<asm:class.LabelledNode>
**LabelledNode**用于任何具有name的节点，因此可以作为[[asm-linknode]]的目标。

_property: labelledNode.name => string
节点的名称。

_heading: LabelNode @<asm-labelnode> @INHERIT<[[asm-labellednode]]> @SRC<asm:class.LabelNode>
通过使用``@myLabel:``引用name，**LabelNode**将被用作要跳转的位置。
自动在字节码偏移处插入一个``JUMPDEST``。

_heading: DataNode @<asm-datanode> @INHERIT<[[asm-labellednode]]> @SRC<asm:class.DataNode>
**DataNode**允许数据直接插入到输出程序集中，使用``@myData[ ... ]``。
如果需要则对数据进行填充，以确保原本被视为``PUSH``值的值不会影响数据以外的任何内容。

_property: dataNode.data => Array<[[asm-valuenode]]>
子节点，代表逐字插入的一段数据。

_heading: ScopeNode @<asm-scopenode> @INHERIT<[[asm-labellednode]]> @SRC<asm:class.ScopeNode>
ScopeNode允许一个新的引用框架，所有[[asm-linknode]]在解析偏移位置时都会使用这个引用框架，使用``@myScope{ ... }``。

_property: scopeNode.statements => Array<[[asm-node]]>
此作用域的子节点列表。


