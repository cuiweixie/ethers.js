_section: 实用工具 @<asm-utilities>

_subsection: 汇编程序
汇编实用程序允许解析和编译[Ethers ASM Dialect](asm-dialect)源文件。

_property: asm.parse(code) => [[asm-node]] @<asm-parse> @SRC<asm/assembler>
解析ethers格式的程序集文件并返回[[asm-ast]]。

_property: asm.assemble(node) => string<[[DataHexString]]> @SRC<asm/assembler:function.assemble>
执行[[asm-ast]]节点的汇编，并返回结果(字节码表示)。

_subsection: 反汇编程序
**反汇编程序** 可以很容易地将字节码转换为一个对象，方便地去检查程序结构。

_property: asm.disassemble(bytecode) => [[asm-bytecode]] @SRC<asm/assembler>
返回给定//字节码//的操作数组。

_property: asm.formatBytecode(operations) => string @SRC<asm/assembler>
创建[[asm-operation]]数组的格式化输出。

_heading: 字节码 @<asm-bytecode> @INHERIT<Array\<[[asm-operation]]\>>
每个数组索引代表一个操作，将多字节操作(即``PUSH``)分解为单个操作。

_property: bytecode.getOperation(offset) => [[asm-operation]]
通过给定的//偏移量//在字节码中获得操作(operation)。需要确保偏移处的字节是一个操作，
而不是包含在``PUSH``中的数据(如果是这种情况将返回null)。

_heading: 操作(Operation) @<asm-operation>
**操作**是来自反汇编字节码流的单个命令。

_property: operation.opcode => [[asm-opcode]]
该操作的操作码。

_property: operation.offset => number
该操作进入字节码的偏移量。

_property: operation.pushValue => string<[[DataHexString]]>
如果操作码是``PUSH``，那么这个输出就是push的值

_subsection: 操作码(Opcode) @<asm-opcode> @SRC<asm/opcodes:class.Opcode>

_property: asm.Opcode.from(valueOrMnemonic) => [[asm-opcode]]
为给定的数值(例如:0x60 is PUSH1)或助记符字符串(例如:"PUSH1")创建一个新的操作码实例。

_heading: 属性

_property: opcode.value => number
该操作码的值(字节码作为数字)。

_property: opcode.mnemonic => string
该操作码的助记符字符串。

_property: opcode.delta => number
该操作码将从堆栈中消耗的项的数量。

_property: opcode.alpha => number
该操作码将压入栈中的项数。

_property: opcode.doc => string
该操作码功能的简短描述。

_property: opcode.isMemory() => "read" | "write" | "full"
如果操作码访问内存则返回true。

_property: opcode.isStatic() => boolean
如果操作码不能更改状态(静态的)，则返回true。

_property: opcode.isJump() => boolean
如果操作码是跳转操作，则返回true。

_property: opcode.isPush() => number
如果操作码不是``PUSH*``，则返回0;
如果是，则返回该操作码将push的字节。
