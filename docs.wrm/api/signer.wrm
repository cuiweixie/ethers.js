
_section: Signers @<signers>

在//ethers//中**Signer**是以太坊账户的抽象，可以用来签名消息和交易，如将签名的交易发送到以太坊网络以执行状态更改的操作。

可用的操作里在很大程度上取决于所使用的子类。

例如，一个来自MetaMask的Signer可以发送交易和签名消息，但不能签名一个不广播的交易。

你会遇到的最常见的Signers有:

- [[Wallet]]，这是一个类，它有自己的私钥，可以用它执行任何操作
- [[JsonRpcSigner]]，它连接到[[JsonRpcProvider]](或子类)，并使用[getSigner](JsonRpcProvider-getSigner)获取

_subsection: Signer @<Signer> @SRC<abstract-signer:class.Signer>

**Signer**类是抽象的，不能直接实例化，而是应该使用一个具体的子类，如 [[Wallet]],
[[VoidSigner]] 或 [[JsonRpcSigner]]。

_property: signer.connect(provider) => [[Signer]]  @<Signer-connect>

子类**必须**实现这个，但是如果更改后的providers是不被支持的话，它们可能仅仅只抛出一个错误。



_property: signer.getAddress() => Promise<string<[[address]]>>  @<Signer-getaddress> @SRC<abstract-signer:Signer.connect>
返回一个解析为帐户地址的Promise。

这是一个Promise，因此一个**Signer**可以围绕一个异步源进行设计，如硬钱包。

子类**必须**实现这个。

_property: Signer.isSigner(object) => boolean  @<Signer-isSigner> @SRC<abstract-signer>
当且仅当 //object// 是一个**Signer**时返回true。

_heading: Blockchain Methods @<Signer--blockchain-methods>

_property: signer.getBalance([ blockTag = "latest" ]) => Promise<[[BigNumber]]>  @<Signer-getBalance> @SRC<abstract-signer>
在指定的//blockTag//下返回这个钱包的余额。

_property: signer.getChainId() => Promise<number>  @<Signer-getChainId> @SRC<abstract-signer>
返回这个钱包连接的链 ID。

_property: signer.getGasPrice() => Promise<[[BigNumber]]>  @<Signer-getGasPrice> @SRC<abstract-signer>
返回当前的gas price。

_property: signer.getTransactionCount([ blockTag = "latest" ]) => Promise<number>  @<Signer-getTransactionCount> @SRC<abstract-signer>
返回此帐户曾经发送的交易数量，交易中的中nonce依赖这个值。

_property: signer.call(transactionRequest) => Promise<string<[[DataHexString]]>>  @<Signer-call> @SRC<abstract-signer>
返回//transactionRequest//调用的结果，此帐户地址用作``from`` 字段。

_property: signer.estimateGas(transactionRequest) => Promise<[[BigNumber]]>  @<Signer-estimateGas> @SRC<abstract-signer>
返回发送//transactionRequest//的估算费用，在使用这个方法之前先用账户地址填充``from``字段。

_property: signer.resolveName(ensName) => Promise<string<[[address]]>> @<Signer-resolveName> @SRC<abstract-signer>
返回与//ensName//关联的地址。


_heading: Signing @<Signer--signing-methods>

_property: signer.signMessage(message) => Promise<string<[RawSignature](signature-raw)>> @<Signer-signMessage>
这将返回一个解析为//消息//的[[signature-raw]]Promise。

由于使用的是[hashMessage](utils-hashMessage)方法，因此它是[EIP-191](link-eip-191)兼容的。
如果在Solidity中恢复地址，则需要这个前缀来创建一个匹配的哈希。

子类**必须**实现这个方法。
如果不支持签名消息可能会抛出错误，比如在基于合约的钱包或基于元交易的钱包中使用时。

_note: Note

如果//message//是一个字符串，它将**被视为一个字符串**并转换为UTF8字节的表示形式。

当且仅当消息是[[Bytes]]时，它将被视为二进制数据。

例如，字符串``"0x1234"``是6个字符长(在本例中是6字节长)。
这与数组``[ 0x12, 0x34 ]``**不同**，数组长度为2字节。

一种常见的情况是对哈希签名。在本例中，如果哈希是一个字符串，则**必须**首先使用[arrayify](utils-arrayify)utility函数将其转换为数组。



_null:

_property: signer.signTransaction(transactionRequest) => Promise<string<[[DataHexString]]>> @<Signer-signTransaction>
返回一个解析为//transactionRequest//中已签名的交易的Promise。
此方法不填充任何缺少的字段。

子类**必须**实现这个，如果不支持签名消息可能会抛出错误，出于安全这在许多客户端中是常见的。

_property: signer.sendTransaction(transactionRequest) => Promise<[[providers-TransactionResponse]]> @<Signer-sendTransaction>
该方法使用[populateTransaction](Signer-populateTransaction)填充缺少字段的transactionRequest，并返回一个解析成交易的Promise。


子类**必须**实现这个，如果不支持发送交易可能会抛出错误，比如[[VoidSigner]]或者如果钱包没有联网且没有连接[[Provider]]。

_property: signer._signTypedData(domain, types, value) => Promise<string<[RawSignature](signature-raw)>>  @<Signer-signTypedData>

Signs the typed data //value// with //types// data structure for //domain// using
the [[link-eip-712]] specification.

_warning: Experimental feature (方法名称会做更改)

这仍然是一个实验中的功能。如果使用它，请**指定**您正在使用的ethers的确切版本(例如指定``"5.0.18"``，而不是``"^5.0.18"``)，
因为方法名将从``_signTypedData``重命名为``signTypedData``。

_code: Typed Data Example @lang<javascript>

//_hide: signer = new Wallet("0x1234567890123456789012345678901234567890123456789012345678901234");

// 作用域中的所有属性都是可选的
const domain = {
    name: 'Ether Mail',
    version: '1',
    chainId: 1,
    verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC'
};

// 所有类型定义的name列表
const types = {
    Person: [
        { name: 'name', type: 'string' },
        { name: 'wallet', type: 'address' }
    ],
    Mail: [
        { name: 'from', type: 'Person' },
        { name: 'to', type: 'Person' },
        { name: 'contents', type: 'string' }
    ]
};

// 待签名的数据
const value = {
    from: {
        name: 'Cow',
        wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826'
    },
    to: {
        name: 'Bob',
        wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB'
    },
    contents: 'Hello, Bob!'
};

//_result:
signature = await signer._signTypedData(domain, types, value);
//_log:


_heading: Sub-Classes @<Signer--subclassing>

**Signer**的所有重要属性都是不可变的，这一点非常重要。由于以太坊是异步的，并处理关键数据(如ether和其他潜在有价值的加密资产)，
整个Signer的生命周期中保持//provider//和 //address//等属性是静态的有助于防止严重的问题的出现，
而且许多其他类和库也是认定//provider//和 //address//等属性是静态的。

子类**必须**扩展Signer，并且**必须**调用``super()``。


_property: signer.checkTransaction(transactionRequest) => [[providers-TransactionRequest]]  @<Signer-checkTransaction> @SRC<abstract-signer>
这通常不需要重写，但可能需要在子类中提供自定义操作。

这应该返回一个//transactionRequest//的副本，包含``call``、``estimateGas``和``populateTransaction`` 
(sendTransaction使用的)所需的任何属性。
如果指定了任何未知的key，它会抛出一个错误。

默认的实现只验证有效的[[providers-TransactionRequest]]属性是否存在，如果不存在，则将``from``添加到交易中。

如果存在``from``字段，则**必须**验证它与 Signer的地址是否相等。

_property: signer.populateTransaction(transactionRequest) => Promise<[[providers-TransactionRequest]]> @<Signer-populateTransaction> @SRC<abstract-signer>
这通常不需要重写，但可能需要在子类中提供自定义操作。

这应该返回一个//transactionRequest//的副本，遵循与``checkTransaction``相同的过程，
并填写发送交易所需的任何属性。返回的结果都是promises，可以使用[resolveProperties](utils-resolveproperties)utility函数来解析。

默认实现调用``checkTransaction``，如果它是一个ENS name就会解析它，并根据Signer上的相关操作添加``gasPrice``, ``nonce``, ``gasLimit``和``chainId``。




_subsection: Wallet  @<Wallet> @INHERIT<[[ExternallyOwnedAccount]] and [[Signer]]> @SRC<wallet:class.Wallet>
Wallet类继承了[[Signer]]，可以使用私钥作为外部拥有帐户(EOA)的标准对交易和消息进行签名。



_property: new ethers.Wallet(privateKey [ , provider ])  @<Wallet-constructor> @SRC<wallet:constructor.Wallet>
为//privateKey//创建一个新的钱包实例，并可选地连接到//provider//。

_property: ethers.Wallet.createRandom( [ options = { } ]) => [[Wallet]]  @<Wallet-createRandom> @SRC<wallet>
返回一个带有随机私钥的新钱包，由加密安全的熵源生成。如果当前环境没有安全的熵源，则会抛出错误。

使用此方法创建的钱包将具有助记词。

_property: ethers.Wallet.fromEncryptedJson(json, password [ , progress ])  => Promise<[[Wallet]]> @<Wallet-fromEncryptedJson> @SRC<wallet>
从加密的JSON钱包创建一个实例。


如果提供了//进度//，它将在解密期间被调用，其值介于0到1之间，表示一个完成进度。



_property: ethers.Wallet.fromEncryptedJsonSync(json, password)  => [[Wallet]] @<Wallet-fromEncryptedJsonSync> @SRC<wallet>
从加密的JSON钱包创建一个实例。


此操作将同步操作，从而锁定用户界面一段时间。
大多数应用程序应该使用异步的``fromEncryptedJson``。



_property: ethers.Wallet.fromMnemonic(mnemonic [ , path, [ wordlist ] ]) => [[Wallet]] @<Wallet.fromMnemonic>
从助记短语中创建实例。

如果没有指定path，则使用以太坊的默认path路径(如``m/44'/60'/0'/0/0``).

如果不指定wordlist，则使用English Wordlist。

_heading: Properties @<Wallet--properties>

_property: wallet.address => string<[[address]]>
此钱包表示的帐户的地址。

_property: wallet.provider => [[Provider]]
这个钱包所连接的provider，它将用于任何[[Signer--blockchain-methods]]的方法，它也可以是null。




_note: 注意
一个**钱包**实例是不可变的，因此如果您希望更改Provider，您可以使用[connect](Signer-connect)方法创建一个连接到所需的provider的新实例。

_property: wallet.publicKey => string<[[DataHexString]]<65>>
此钱包的未压缩的公钥。

_heading: Methods @<Wallet--methods>

_property: wallet.encrypt(password, [ options = { }, [ progress ] ]) => Promise<string> @<Wallet-encrypt>
加密钱包，使用//password//返回一个解析为JSON钱包的Promise。

如果提供了//进度//，它将在解密期间被调用，其值介于0到1之间，表示一个完成进度。

_code: Wallet Examples @lang<javascript>

// 通过助记词创建一个钱包实例
mnemonic = "announce room limb pattern dry unit scale effort smooth jazz weasel alcohol"
walletMnemonic = Wallet.fromMnemonic(mnemonic)

// 或者通过私钥创建一个钱包实例
walletPrivateKey = new Wallet(walletMnemonic.privateKey)

//_result:
walletMnemonic.address === walletPrivateKey.address
//_log:

// 有着每个Signer API的地址，是一个Promise对象
//_result:
await walletMnemonic.getAddress()
//_log:

// 一个钱包地址，也可用同步的方式获得
//_result:
walletMnemonic.address
//_log:

// 内部加密组件
//_result:
walletMnemonic.privateKey
//_log:
//_result:
walletMnemonic.publicKey
//_log:

// 钱包助记词
//_result:
walletMnemonic.mnemonic
//_log:

// Note: 通过私钥创建的钱包实例没有助记词，因为从数学上无法推导
//_result:
walletPrivateKey.mnemonic
//_log:

// 签名消息
//_result:
await walletMnemonic.signMessage("Hello World")
//_log:

tx = {
  to: "0x8ba1f109551bD432803012645Ac136ddd64DBA72",
  value: utils.parseEther("1.0")
}

// 签名交易
//_result:
await walletMnemonic.signTransaction(tx)
//_log:

// connect方法返回一个连接到provider的新钱包实例
//_result:
wallet = walletMnemonic.connect(provider)
//_null:

// 从网络中查询
//_result:
await wallet.getBalance();
//_log:
//_result:
await wallet.getTransactionCount();
//_log:

// 发送 ether
//_hide: wallet = localSigner; /* prevent insufficient funds error from blowing up the docs */
//_result:
await wallet.sendTransaction(tx)
//_log:



_subsection: VoidSigner  @<VoidSigner> @INHERIT<[[Signer]]> @SRC<abstract-signer:class.VoidSigner>
一个**VoidSigner**是一个简单的Signer，它不能签名。

当API需要signer作为参数时，它作为只读的signer是有用的，但它只能携带只读的操作。

比如，在``call``函数调用期间会自动传递所提供的地址。

_property: new ethers.VoidSigner(address [ , provider ]) => [[VoidSigner]]
为一个地址创建**VoidSigner**实例。

_property: voidSigner.address => string<[[address]]>
**VoidSigner**的地址。

_code: VoidSigner Pre-flight Example @lang<javascript>

address = "0x8ba1f109551bD432803012645Ac136ddd64DBA72"
signer = new ethers.VoidSigner(address, provider)

// The DAI token contract
abi = [
  "function balanceOf(address) view returns (uint)",
  "function transfer(address, uint) returns (bool)"
]
contract = new ethers.Contract("dai.tokens.ethers.eth", abi, signer)

// 获取此帐户的token数量
//_result:
tokens = await contract.balanceOf(signer.getAddress())
//_log:

//
// Pre-flight (check for revert) on DAI from the signer
//
// 注意： 我们现在还没有私钥，这仅仅允许我们检查这样做时会发生什么。这是前端界面中发出请求进行检查是很有用的。

// 当 token 余额可用时将会正确执行转账
//_result:
await contract.callStatic.transfer("donations.ethers.eth", tokens)
//_log:

// 当转账的数量大于 token 余额时将会失败
//_throws:
await contract.callStatic.transfer("donations.ethers.eth", tokens.add(1))
//_log:


_subsection: ExternallyOwnedAccount  @<ExternallyOwnedAccount>

这个接口包含外部拥有帐户（EOA）所需的最小属性集，可以执行某些操作，比如将其编码为JSON钱包。

_property: eoa.address => string<[[address]]>

[[address]]EOA的地址

_property: eoa.privateKey => string<[[DataHexString]]<32>>

EOA的私钥

_property: eoa.mnemonic => [[Mnemonic]]
//可选的//。帐户HD的助记词，如果有的话可以打印出来。EOA账户源不编码助记符，如HD extended keys。


