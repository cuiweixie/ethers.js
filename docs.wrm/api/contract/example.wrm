_section: Example: ERC-20 Contract
元类（Meta-Classes）的概念有些令人困惑，因此我们将介绍一个简短的例子。

元类是在运行时（run-time）定义的类。合约是由应用程序二进制接口(ABI)指定的，它描述了它所拥有的方法和事件。
这些描述是[[Contract]]对象处于run-time时传入的，它创建一个新的Class，在run-time时添加了ABI中定义的所有方法。

_subsection: 部署合约
大多数情况下，您需要与之交互的任何合约都已经部署到区块链上，但对于本例需要先部署合约。

_property: new ethers.ContractFactory(abi, bytecode, signer)
创建一个新的[[ContractFactory]]，它可以将合约部署到区块链。

_code: @lang<javascript>

//_hide: const signer = localSigner;
//_hide: const parseUnits = utils.parseUnits;

const bytecode = "0x608060405234801561001057600080fd5b506040516103bc3803806103bc83398101604081905261002f9161007c565b60405181815233906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a333600090815260208190526040902055610094565b60006020828403121561008d578081fd5b5051919050565b610319806100a36000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063313ce5671461005157806370a082311461006557806395d89b411461009c578063a9059cbb146100c5575b600080fd5b604051601281526020015b60405180910390f35b61008e610073366004610201565b6001600160a01b031660009081526020819052604090205490565b60405190815260200161005c565b604080518082018252600781526626bcaa37b5b2b760c91b6020820152905161005c919061024b565b6100d86100d3366004610222565b6100e8565b604051901515815260200161005c565b3360009081526020819052604081205482111561014b5760405162461bcd60e51b815260206004820152601a60248201527f696e73756666696369656e7420746f6b656e2062616c616e6365000000000000604482015260640160405180910390fd5b336000908152602081905260408120805484929061016a9084906102b6565b90915550506001600160a01b0383166000908152602081905260408120805484929061019790849061029e565b90915550506040518281526001600160a01b0384169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a350600192915050565b80356001600160a01b03811681146101fc57600080fd5b919050565b600060208284031215610212578081fd5b61021b826101e5565b9392505050565b60008060408385031215610234578081fd5b61023d836101e5565b946020939093013593505050565b6000602080835283518082850152825b818110156102775785810183015185820160400152820161025b565b818111156102885783604083870101525b50601f01601f1916929092016040019392505050565b600082198211156102b1576102b16102cd565b500190565b6000828210156102c8576102c86102cd565b500390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220d80384ce584e101c5b92e4ee9b7871262285070dbcd2d71f99601f0f4fcecd2364736f6c63430008040033";

// 一个人类可读（Human-Readable）的ABI;我们只需要指定相关的部分内容，在这里我们用到了构造函数
const abi = [
    "constructor(uint totalSupply)"
];

const factory = new ethers.ContractFactory(abi, bytecode, signer)

// 部署，设置token的total supply为100，分配给部署人（deployer）
const contract = await factory.deploy(parseUnits("100"));

//链上现在虽然我们还没有这个合约，但是这个合约地址我们是预先经过计算后得到的
//_result:
contract.address
//_log:
//_hide: _page.address = contract.address;

// 在交易被挖出来之前(即合约被部署)等待（Wait）
//  - 部署后，交易会返回receipt
//_result:
await contract.deployTransaction.wait();
//_log:


_subsection: 连接到合约

_heading: ERC20Contract @INHERIT<[[Contract]]>

_property: new ethers.Contract(address, abi, providerOrSigner)
创建一个Contract的新实例，是通过在区块链上指定这个合约的地址、以及它的//abi//(用于填充类的方法)和providerOrSigner来连接到的。

如果给定了[[Provider]]，那么合约只有只读访问权限，而[[Signer]]则提供了对状态操作方法的访问权限。

_code: @lang<javascript>

//_hide: const provider = localProvider;
//_hide: const signer = localSigner;

// 一个人类可读（Human-Readable）的ABI;用来与合约交互，必须要包含我们要具体使用的函数内容
const abi = [
    // Read-Only Functions
    "function balanceOf(address owner) view returns (uint256)",
    "function decimals() view returns (uint8)",
    "function symbol() view returns (string)",

    // Authenticated Functions
    "function transfer(address to, uint amount) returns (bool)",

    // Events
    "event Transfer(address indexed from, address indexed to, uint amount)"
];

// 可以是 address 也可以是 一个 ENS name
//_hide: const address = _page.address;
//_verbatim: `const address = ${ JSON.stringify(address) };`

// 只读; 通过 Provider连接，允许以下操作:
// - 访问常量函数 constant function
// - 查询过滤器
// - 对于 non-constant methods 填充未签名的交易
// - 对于non-constant估算Gas(作为匿名发送者)
// - 对于non-constant methods静态调用 (作为匿名发送者)
const erc20 = new ethers.Contract(address, abi, provider);
//_hide: _page.erc20 = erc20;

// 可读写; 通过Signer连接，允许以下操作:
// - 任何只读的操作 (作为Signer而非匿名者)
// - 为non-constant functions发送交易
const erc20_rw = new ethers.Contract(address, abi, signer);
//_hide: _page.erc20_rw = erc20_rw;


_subsection: 属性 @NOTE<(inheritted from [[Contract]])>

_property: erc20.address => string<[[address]]>
合约被创建的 地址address (或 ENS name) 

_property: erc20.resolvedAddress => string<[[address]]>
这是一个解析到**合约**对象的地址的promise。
如果是[[address]]提供给构造函数，结果就是这个[[address]];
如果提供的是ENS name，结果就是解析后地址。

_property: erc20.deployTransaction => [[providers-TransactionResponse]]
如果Contract对象是ContractFactory部署的得到的，在这里的返回的结果就是用于部署合约的交易。

_property: erc20.interface => [[Interface]]
这是作为[[Interface]]的ABI。

_property: erc20.provider => [[Provider]]
如果一个provider被提供给构造函数，这条语句的结果就是provider；
如果提供了的[[Provider]]是一个signer，结果就是signer。

_property: erc20.signer => [[Signer]]
如果是一个signer提供给构造函数，结果就是signer。

_subsection: Methods @NOTE<(inheritted from [[Contract]])>

_property: erc20.attach(addressOrName) => [[Contract]]
返回一个附在新地址的**合约**的新实例。
如果网络上有多个类似或相同的合约副本，并且您希望与它们中的每一个进行交互，那么这是非常有用的。

_property: erc20.connect(providerOrSigner) => [[Contract]]
返回合约的新实例，但需要连接provider或者Signer。

通过传入一个[[Provider]]，这将返回一个低级的**合约**，它只有只读访问(即常量调用)。

通过传入一个[[Signer]]。这将返回一个代表该signer的**合约**。

_property: erc20.deployed() => Promise<Contract>

_property: Contract.isIndexed(value) => boolean


_subsection: 事件（Events） @NOTE<(inheritted from [[Contract]])> @<erc20-events>

关于使用事件的例子请参考[Meta-Class Filters](erc20-meta-events)。

_property: erc20.queryFilter(event [ , fromBlockOrBlockHash [ , toBlock ]) => Promise<Array<Event>> @<erc20-queryfilter>
返回匹配//event//参数的事件。

_property: erc20.listenerCount([ event ]) => number
返回订阅该//event//的监听器数量。如果没有提供//event//，则返回所有事件的总数。

_property: erc20.listeners(event) => Array<Listener>
返回订阅该//event//的监听器列表。

_property: erc20.off(event, listener) => this
返回订阅该//event//的监听器列表。

_property: erc20.on(event, listener) => this
监听//event//事件，当事件发生时，会调用//listener//函数。

_property: erc20.once(event, listener) => this
监听//event//事件，当事件发生时，仅调用一次//listener//函数。

_property: erc20.removeAllListeners([ event ]) => this
取消所有订阅//event//事件的监听器。如果未提供//event//事件，则取消订阅所有事件的监听。

_subsection: Meta-Class Methods @NOTE<(added at Runtime)> @<erc20-meta-methods>

因为合约是元类，这里面可用的方法取决于传入**合约**的ABI。

_property: erc20.decimals([ overrides ]) => Promise<number>
返回此ERC-20 token所使用的小数位数。在前端界面，当从用户获取输入时，可以使用[parseUnits](utils-parseUnits)转化后传入合约；
从合约获得token后可以通过[formatUnits](utils-formatunits]转化后再显示给用户。

_code: @lang<javascript>

//_hide: const erc20 = _page.erc20;
//_result:
await erc20.decimals();
//_log:

_property: erc20.balanceOf(owner [, overrides ]) => Promise<[[BigNumber]]>
返回持有这个ERC-20 token的//持有者(owner)//的余额。

_code: @lang<javascript>

//_hide: const signer = localSigner;
//_hide: const erc20 = _page.erc20;

//_result:
await erc20.balanceOf(signer.getAddress())
//_log:

_property: erc20.symbol([ overrides ]) => Promise<string>
返回token的symbol。

_code: @lang<javascript>

//_hide: const erc20 = _page.erc20;
//_result:
await erc20.symbol();
//_log:

_property: erc20_rw.transfer(target, amount [, overrides ]) => Promise<[[providers-TransactionResponse]]>
从当前的signer将数量为//amount//的tokens转给接收者//target//。
在交易处于写入操作时，返回值(布尔类型)是得不到的。
如果需要这个值，则需要其他方法(如事件)。链上合约调用``transfer``函数可以得到这个结果。

_code: @lang<javascript>

//_hide: const signer = localSigner;
//_hide: const erc20_rw = _page.erc20_rw;
//_hide: const parseUnits = utils.parseUnits;
//_hide: const formatUnits = utils.formatUnits;

// 在这之前先转化格式
//_result:
formatUnits(await erc20_rw.balanceOf(signer.getAddress()));
//_log:

// 转 1.23 tokens 到 ENS name 为 "ricmoo.eth" 的地址
//_result:
tx = await erc20_rw.transfer("ricmoo.eth", parseUnits("1.23"));
//_log:

// 等待交易所在的区块被挖出打包
//_result:
await tx.wait();
//_log:

// 成功后转化格式
//_result:
formatUnits(await erc20_rw.balanceOf(signer.getAddress()));
//_log:

//_result:
formatUnits(await erc20_rw.balanceOf("ricmoo.eth"));
//_log:

_property: erc20.callStatic.transfer(target, amount [, overrides ]) => Promise<boolean>
执行一次从当前signer向//target//地址转移//amount//数量的token的演练，而不实际签名或发送交易。

这可以用于检查真实的转账前，交易是否能成功。


_code: @lang<javascript>

//_hide: const erc20_rw = _page.erc20_rw;
//_hide: const randomWallet = ethers.Wallet.createRandom().connect(erc20_rw.provider);
//_hide: const parseUnits = utils.parseUnits;

// signer有足够的tokens发送的话，结果会返回true
//_result:
await erc20_rw.callStatic.transfer("ricmoo.eth", parseUnits("1.23"));
//_log:

// 一个随机的地址不会有足够的tokens用于发送，在这个例子里会抛出错误
erc20_random = erc20_rw.connect(randomWallet);
//_throws:
await erc20_random.callStatic.transfer("ricmoo.eth", parseUnits("1.23"));
//_log:

_property: erc20.estimateGas.transfer(target, amount [, overrides ]) => Promise<[[BigNumber]]>
返回估计的“将//amount//数量的tokens发送//target//地址”所需的多少gas值。

_code: @lang<javascript>

//_hide: const erc20_rw = _page.erc20_rw;
//_hide: const parseUnits = utils.parseUnits;

//_result:
await erc20_rw.estimateGas.transfer("ricmoo.eth", parseUnits("1.23"));
//_log:

_property: erc20.populateTransaction.transfer(target, amount [, overrides ]) => Promise<[UnsignedTx](UnsignedTransaction)>
返回一个[[UnsignedTransaction]]，它可以被签名并提交给网络，达成“将//amount//数量的tokens发送//target//地址”的目的。

_code: @lang<javascript>

//_hide: const erc20_rw = _page.erc20_rw;
//_hide: const parseUnits = utils.parseUnits;

//_result:
await erc20_rw.populateTransaction.transfer("ricmoo.eth", parseUnits("1.23"));
//_log:

_note: 关于估算和静态调用的注意事项
当你执行一个静态调用时，以太坊会尽可能地考虑当前状态。
在许多情况下，这可能会提供假阳性和假阴性。
The eventually consistent model of the
blockchain also means there are certain consistency modes that cannot be
known until an actual transaction is attempted.




_subsection: Meta-Class Filters @NOTE<(added at Runtime)> @<erc20-meta-events>

因为合约是元类，这里面可用的方法取决于传入**合约**的ABI。

_property: erc20.filters.Transfer([ fromAddress [ , toAddress ] ]) => Filter
返回一个新的Filter用于[查询](erc20-queryfilter)或者去[subscribe/unsubscribe to events](erc20-events)。

如果//fromAddress// 是空的或者没有填写，将匹配任何发送人的地址。
如果 //toAddress//是空的或者没有填写，将匹配任何接受人的地址。

_code: query filter *from* events @lang<javascript>

//_hide: const signer = localSigner;
//_hide: const erc20 = _page.erc20;

//_result:
filterFrom = erc20.filters.Transfer(signer.address);
//_log:

// 在最新的10个区块内查询我发送的交易
//_result:
logsFrom = await erc20.queryFilter(filterFrom, -10, "latest");
//_log:

// 请注意，args提供了事件的详细信息，每个参数都是可用的，这是因为我们的ABI包含了所有参数的名称
//_result:
logsFrom[0].args
//_log:

//_hide: _page.filterFrom = filterFrom;


_code: query filter with *to* events @lang<javascript>

//_hide: const signer = localSigner;
//_hide: const erc20 = _page.erc20;

//_result:
filterTo = erc20.filters.Transfer(null, signer.address);
//_log:

// 在最新的10个区块内查询发送给我的交易
// 注意: 这是因为合约在部署时，构造函数写了将totalSupply tokens转给我
//_result:
logsTo = await erc20.queryFilter(filterTo, -10, "latest");
//_log:

// 请注意，args提供了事件的详细信息，每个参数都是可用的，这是因为我们的ABI包含了所有参数的名称
//_result:
logsTo[0].args
//_log:

//_hide: _page.filterTo = filterTo;

_code: listen for events @lang<javascript>

//_hide: const erc20 = _page.erc20;
//_hide: const filterFrom = _page.filterFrom;
//_hide: const filterTo = _page.filterTo;

// 监听signer的发送的event事件:
erc20.on(filterFrom, (from, to, amount, event) => {
  // The `from` will always be the signer address
});

// 监听signer的接受转账的event事件:
erc20.on(filterTo, (from, to, amount, event) => {
  // The `to` will always be the signer address
});

// 监听所有的转账交易event事件:
erc20.on("Transfer", (from, to, amount, event) => {
  // ...
});

//_hide: erc20.removeAllListeners();
