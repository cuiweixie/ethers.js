_section: ContractFactory @<ContractFactory> @SRC<contracts:class.ContractFactory>

去部署一个[[Contract]]，需要附加一些不作用于Contract对象本身上的信息。

要注意，合约的字节码(更确切地说是初始化代码)是必需的。

**Contract Factory**发送一个特殊类型的交易，一个initcode交易(即，``to``字段是空的，``data``字段是initcode)，
其中initcode将被分析计算，结果成为新代码部署为一个新的合约。

_subsection: 创建实例  @<ContractFactory--creating>

_property: new ethers.ContractFactory(interface, bytecode [ , signer ]) @SRC<contracts:constructor.ContractFactory>

为接口和字节码的初始化代码所描述的合约创建一个**ContractFactory**的新实例。

_property: ContractFactory.fromSolidity(compilerOutput [ , signer ]) => [[ContractFactory]]
使用Solidity编译器的输出，从中提取ABI和字节码，允许solc编译器在其生命周期内输出任何格式。

_property: contractFactory.connect(signer) => [[ContractFactory]] @<ContractFactory-connect>
返回ContractFactory的一个**新实例**，该实例具有相同的接口和字节码，但//signer//不一样。

_subsection: 属性  @<ContractFactory--properties>

_property: contractFactory.interface => [[Interface]]

[[Contract]]的接口。

_property: contractFactory.bytecode => string<[[DataHexString]]>
这个**ContractFactory**部署合约是需要用到的字节码(即 initcode)。

_property: contractFactory.signer => [[Signer]]
这个ContractFactory用这个[[Signer]](如果有的话)将合约的实例部署到链上。



_subsection: 方法  @<ContractFactory--methods>

_property: contractFactory.attach(address) => [[Contract]] @<ContractFactory-attach>
返回附有地址的(合约)实例。这与使用带有地址//address//的[Contract constructor](Contract--creating)构造函数是一样的，
在创建ContractFactory时会传入的//interface//和signerOrProvider。



_property: contractFactory.getDeployTransaction(...args [ , overrides ]) => [[UnsignedTransaction]]

返回一个未签名的交易，该交易将会具有部署合约时，传递给Contract的构造函数的//args//参数。

如果//overrides//被指定了，它们可以用来用来对某些变量进行覆盖赋值、如``value``, 交易的 ``nonce``, ``gasLimit`` 或
``gasPrice``。


_property: contractFactory.deploy(...args [ , overrides ]) => Promise<[[Contract]]> @<ContractFactory-deploy>
使用signer去部署带有//args//参数传入构造函数的合约，并返回一个Contract，该Contract有address属性，一旦这个交易所在区块被挖出，address属性表示的就是这个合约的地址。

这个交易可以在``contract.deployTransaction``中找到，在挖出这个交易之前不应该进行交互。

如果//overrides//被指定了，它们可以用来用来对某些变量进行覆盖赋值、如``value``, 交易的 ``nonce``, ``gasLimit`` 或
``gasPrice``。

_code: 部署合约 @lang<javascript>

//_hide: const signer = localSigner;
//_hide: const ContractFactory = ethers.ContractFactory;
//_hide: const bytecode = "608060405234801561001057600080fd5b5060405161012e38038061012e8339818101604052604081101561003357600080fd5b81019080805190602001909291908051906020019092919050505081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060008190555050506088806100a66000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80633fa4f24514602d575b600080fd5b60336049565b6040518082815260200191505060405180910390f35b6000805490509056fea2646970667358221220926465385af0e8706644e1ff3db7161af699dc063beaadd55405f2ccd6478d7564736f6c63430007040033";

// 如果合约构造函数需要参数，ABI必须包含构造函数constructor
const abi = [
  "constructor(address owner, uint256 initialValue)",
  "function value() view returns (uint)"
];

// 我们使用factory来部署合约
factory = new ContractFactory(abi, bytecode, signer)

// 部署合约的实例
contract = await factory.deploy("ricmoo.eth", 42);

// 地址直接可以得到，但是记住合约还没有被部署
//_result:
contract.address
//_log:

// signer发送的部署合约的交易
//_result:
contract.deployTransaction
//_log:

// 在交易被挖出来之前(即合约被部署)等待（Wait）
//  - 返回receipt
//  - throws on failure (reciept发生错误)
//_result:
await contract.deployTransaction.wait()
//_log:

// 现在合约时可以用来交互了
//_result:
await contract.value()
//_log:
