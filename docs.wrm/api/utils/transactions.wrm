_section: 交易 @<transactions>

_subsection: 类型 @<transactions--types>

_heading: 未签名交易(UnsignedTransaction) @<UnsignedTransaction>
An unsigned transaction represents a transaction that has not been
signed and its values are flexible as long as they are not ambiguous.

_property: unsignedTransaction.to => string<[Address](address)>
交易的目标地址。

_property: unsignedTransaction.nonce => number
交易的nonce值。

_property: unsignedTransaction.gasLimit => [[BigNumberish]]
交易的 gas limit。

_property: unsignedTransaction.gasPrice => [[BigNumberish]]
交易的 gas price。

_property: unsignedTransaction.maxFeePerGas => [[BigNumberish]]
本次交易每单位gas的最高费用。

_property: unsignedTransaction.maxPriorityFeePerGas => [[BigNumberish]]
本次交易每单位gas的最高优先费用。

_property: unsignedTransaction.data => [[BytesLike]]
交易的data。

_property: unsignedTransaction.value => [[BigNumberish]]
交易的value (单位为wei)。

_property: unsignedTransaction.chainId => number
此交易的链ID。如果链ID为0或null，则[[link-eip-155]]失效并使用遗留签名(legacy signing)，除非重写覆盖该签名。

_heading: 交易 @<Transaction>
表示交易的通用对象。

_property: transaction.hash => string<[[DataHexString]]<32>>
交易哈希，可以用作//交易//的标识符。这是交易的序列化RLP编码的keccak256表示。

_property: transaction.to => string<[Address](address)>
//交易//的目标地址。

_property: transaction.from => string<[Address](address)>
//交易//的发起地址。

_property: transaction.nonce => number
交易的nonce值。每个从帐户发送到网络的交易都包含这个值，这确保了交易的顺序和不可重复支付的特性。
这个值等于**from**地址发送到网络的交易数。

_property: transaction.gasLimit => [[BigNumber]]
交易的gas limit。一个帐户必须有足够的以太(ether)来支付gas(在指定的**gasPrice**)。
在交易结束时，任何未使用的gas都将被退还，如果没有足够的gas来完成执行，
则交易的效果将被revert，但gas会被完全消耗，并抛出了out-of-gas错误。

_property: transaction.gasPrice => null | [[BigNumber]]
交易的每单位gas的价格(单位为wei)。

对于[[link-eip-1559]]交易，该值为null。

_property: transaction.maxFeePerGas => [[BigNumber]]
交易的每单位gas的最高价格(单位为wei)。

对于非[[link-eip-1559]]交易，该值为null。

_property: transaction.maxPriorityFeePerGas => [[BigNumber]]
交易的每单位gas的优先费用价格(单位wei)。

对于非[[link-eip-1559]]交易，该值为null。

_property: transaction.data => [[BytesLike]]
用于交易的数据。在合约中，这是call data。

_property: transaction.value => [[BigNumber]]
交易的value (单位为wei)。

_property: transaction.chainId => number
交易的链ID。这是[[link-eip-155]]的一部分，用于防止不同网络上的重放攻击(replay attacks)。

例如，如果在ropsten链上进行的交易可能会被打包到homestead链上被使用，
那么在ropsten链上签署的交易可能会在homestead链上执行，即使不是用户故意这样操作的。

有些情况下，可能需要重放，但这是非常罕见的，因此建议总是指定链ID。

_property: transaction.r => string<[[DataHexString]]<32>>
交易的椭圆曲线签名的r部分，准确地说，是点r(从该点可以计算出y和v)的x坐标。

_property: transaction.s => string<[[DataHexString]]<32>>
交易的椭圆曲线签名的s部分。

_property: transaction.v => number
交易的椭圆曲线签名的v部分。
This is used to refine which of the two possible points a given
x-coordinate can have，
并且在[[link-eip-155]]中还用于将链ID编码到序列化的交易中。


_subsection: 函数  @<transactions--functions>

_property: ethers.utils.accessListify(anAcceslistish) => [[providers-AccessList]]  @<utils-accessListify> @SRC<transactions:accessListify>
将[[providers-AccessListish]]//anAccessListish//标准化为一个[[providers-AccessList]]。

这对于希望在访问列表的输入参数方面保持灵活性的其他实用程序函数中非常有用，
such as when creating a [[Signer]] which needs to manipulate a possibly
typed transaction envelope.

_property: ethers.utils.parseTransaction(aBytesLike) => [[Transaction]]  @<utils-parseTransaction> @SRC<transactions:parse>
解析经过序列化的交易的属性。

_property: ethers.utils.serializeTransaction(tx [ , signature ]) => string<[[DataHexString]]>  @<utils-serializeTransaction> @SRC<transactions:serialize>
计算序列化的交易，可选地使用签名进行序列化。如果没有签名，则返回未签名的序列化交易，可用于计算签名的hash。

如果提供了chainId，则此函数将使用[[link-eip-155]]，否则将使用legacy serialization。
强烈建议总是指定chainId。

如果签名包含链ID(通过显式地或隐式地使用[[link-eip-155]]的一个 ``v`` 或 ``_vs``)，它将被用于计算链ID。

如果交易的链ID和签名之间不匹配，则抛出错误。