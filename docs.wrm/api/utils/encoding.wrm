_section: 编码工具 @<encoding>

_subsection: Base58 @<Bse58> @SRC<basex:Base58>

_property: ethers.utils.base58.decode(textData) => Uint8Array
返回//textData//(经过base-58编码)解码成Uint8Array类型的数据。

_code: @lang<javascript>

//_hide: const base58 = ethers.utils.base58;

//_result:
base58.decode("TzMhH");
//_log:

_property: ethers.utils.base58.encode(aBytesLike) => string
返回//aBytesLike//(经过base-58编码)解码成字符串类型的数据。

_code: @lang<javascript>

//_hide: const base58 = ethers.utils.base58;

//_result:
base58.encode("0x12345678");
//_log:

//_result:
base58.encode([ 0x12, 0x34, 0x56, 0x78 ]);
//_log:


_subsection: Base64 @<Base64>

_property: ethers.utils.base64.decode(textData) => Uint8Array  @SRC<base64>
返回//textData//(经过base-64编码)解码成Uint8Array类型的数据。

_code: @lang<javascript>

//_hide: const base64 = ethers.utils.base64;

//_result:
base64.decode("EjQ=");
//_log:

_property: ethers.utils.base64.encode(aBytesLike) => string  @SRC<base64>
返回//aBytesLike//(经过base-64编码)解码成字符串类型的数据。

_code: @lang<javascript>

//_hide: const base64 = ethers.utils.base64;

//_result:
base64.encode("0x1234");
//_log:

//_result:
base64.encode([ 0x12, 0x34 ]);
//_log:


_subsection: 递归长度前缀编码(RLP编码) @<rlp--methods>
递归长度前缀编码([[link-rlp]]RLP编码)在以太坊中被用来序列化数组和数据的嵌套结构。

_property: ethers.utils.RLP.encode(dataObject) => string<[[DataHexString]]>  @<utils-rlpEncode> @SRC<rlp>
将结构化[数据对象](rlp--dataobject)编码到RLP编码的形式。

_code: @lang<javascript>

//_hide: const RLP = ethers.utils.RLP;

//_result:
RLP.encode("0x12345678");
//_log:

//_result:
RLP.encode([ "0x12345678" ]);
//_log:

//_result:
RLP.encode([ new Uint8Array([ 0x12, 0x34, 0x56, 0x78 ]) ]);
//_log:

//_result:
RLP.encode([ [ "0x42", [ "0x43" ] ], "0x12345678", [ ] ]);
//_log:

//_result:
RLP.encode([ ]);
//_log:

_property: ethers.utils.RLP.decode(aBytesLike) => [DataObject](rlp--dataobject)  @<utils.rlpDecode> @SRC<rlp>
将RLP编码的//aBytesLike//解码为其结构化[数据对象](rlp--dataobject)。

所有的Data组件将作为一个[[DataHexString]]返回。

_code: @lang<javascript>

//_hide: const RLP = ethers.utils.RLP;

//_result:
RLP.decode("0x8412345678");
//_log:

//_result:
RLP.decode("0xcac342c1438412345678c0");
//_log:

//_result:
RLP.decode("0xc0");
//_log:

_heading: 数据对象(Data Object) @<rlp--dataobject>
数据对象是一种递归结构，用于序列化以太坊中的许多内部结构。每个数据对象可以是:

- 二进制数据
- 一个**数据对象**数组 (即递归嵌套结构)

_definition: **Examples**

- ``"0x1234"``
- ``[ "0x1234", [ "0xdead", "0xbeef" ], [ ] ]``
