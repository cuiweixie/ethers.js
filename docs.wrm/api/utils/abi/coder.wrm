_section: AbiCoder @<AbiCoder> @SRC<abi:class.AbiCoder>

**AbiCoder**是编码器的集合，可用于在EVM和更高级别库之间通过二进制数据格式进行编码和解码的操作。

大多数开发人员不需要直接使用这个类，因为[[Interface]]类极大地简化了这些操作。

_subsection: 创建实例 @<AbiCoder--creating>

在大多数情况下，都不需要手动创建[[AbiCoder]]的实例，因为当库被加载时，一个实例是用默认的强制函数创建的，它可以被普遍使用。

这可能只有那些有特殊需求的人才需要，通过二进制格式解码后将值进行强制更改。

This is likely only needed by those with specific needs 
to override how values are coerced after they are decoded from their binary format.

_property: new ethers.utils.AbiCoder([coerceFunc]) @SRC<abi:constructor.AbiCoder>

创建一个新的AbiCoder实例，在每一个需要解码的地方都会调用//coerceFunc//，调用的结果将在Result中使用。

函数签名是`(type, value)`，//type//字段是是描述类型的字符串，//value// 字段是来自底层Coder的处理过的值。

如果回调抛出错误，Result将包含一个被访问时将抛出的属性，从而允许更高级别的库从数据错误中恢复。

_property: ethers.utils.defaultAbiCoder => [[AbiCoder]]
当[[Interface]]使用的库在被导入时将创建一个[[AbiCoder]]。

_subsection: Coding Methods @<AbiCoder--methods>

_property: abiCoder.encode(types, values) => string<[[DataHexString]]> @<AbiCoder-encode> @SRC<abi/abi-coder>
根据数组中的//types//对数组//values//进行编码，每个类型可以是字符串或[[ParamType]]。

_code: @lang<javascript>

//_hide: const abiCoder = utils.defaultAbiCoder;

// 对简单的类型进行编码
//_result:
abiCoder.encode([ "uint", "string" ], [ 1234, "Hello World" ]);
//_log:
//_hide: _page.example1 = _;

// 对数组的类型进行编码
//_result:
abiCoder.encode([ "uint[]", "string" ], [ [ 1234, 5678 ] , "Hello World" ]);
//_log:
//_hide: _page.example2 = _;

// 对复杂的结构体进行编码 (使用 positional 属性)
//_result:
abiCoder.encode(
  [ "uint", "tuple(uint256, string)" ],
  [
    1234,
    [ 5678, "Hello World" ]
  ]
);
//_log:
//_hide: _page.example3 = _;

// 对复杂的结构体进行编码 (使用 keyword 属性)
//_result:
abiCoder.encode(
  [ "uint a", "tuple(uint256 b, string c) d" ],
  [
    1234,
    { b: 5678, c: "Hello World" }
  ]
);
//_log:

_property: abiCoder.decode(types, data) => [[Result]] @<AbiCoder-decode> @SRC<abi/abi-coder>

根据数组中的//types//对//data//进行编码，每个类型可以是字符串或[[ParamType]]。

_code: @lang<javascript>

//_hide: const abiCoder = utils.defaultAbiCoder;

// 对简单的类型进行解码
//_hide: data = _page.example1;
//_verbatim: `data = ${ JSON.stringify(data) };`
//_result:
abiCoder.decode([ "uint", "string" ], data);
//_log:

// 对数组的类型进行解码
//_hide: data = _page.example2;
//_verbatim: `data = ${ JSON.stringify(data) };`
//_result:
abiCoder.decode([ "uint[]", "string" ], data);
//_log:

// 对复杂的结构体进行解码; 参数如果未命名，只允许按照位置（positional）方式去访问值（values）
//_hide: data = _page.example3;
//_verbatim: `data = ${ JSON.stringify(data) };`
//_result:
abiCoder.decode([ "uint", "tuple(uint256, string)" ], data);
//_log:

// 对复杂的结构体进行解码; 参数如果已命名，可通过位置（positional）方式和关键词（keyword）方式去访问值（values）
//_result:
abiCoder.decode([ "uint a", "tuple(uint256 b, string c) d" ], data);
//_log:
