_section: Interface @<Interface> @SRC<abi/interface:class.Interface>

**接口(Interface)**类是以太坊网络上的与合约交互所需的编码和解码的一种抽象。

许多标准都是随着[[link-solidity]]语言而发展的，其他语言也采用这种方式去与现有部署的合约的保持兼容。

EVM本身并不理解ABI是什么。它只是一组商定的格式，用于编码合约所需的各种类型的数据，以便它们可以相互交互。

_subsection: 创建实例 @<Interface--creating>

_property: new ethers.utils.Interface(abi) @SRC<abi/interface:constructor.Interface>

从表示//abi//的JSON字符串或对象创建一个新的**接口**。

//abi//可以是JSON字符串或[Solidity 编译器](link-solc-output)(或其他兼容语言)使用JSON.parse生产的对象。

//abi// 也可以是[Human-Readable Abi](link-ricmoo-humanreadableabi)，
它是Ethers创建的一种格式，以简化将abi手动输入到源文件中的操作，
这样就可以在同一个源文件中简单地引用Contract abi。

_code: 创建接口实例 @lang<javascript>

//_hide: const Interface = ethers.utils.Interface;

// 接口用法示例如下

const iface = new Interface([
  // 构造函数
  "constructor(string symbol, string name)",

  // 会改变状态的方法
  "function transferFrom(address from, address to, uint amount)",

  // 会改变状态的方法，是 payable 的(可接收以太币)
  "function mint(uint amount) payable",

  // 常量方法 (如 "view" 或 "pure")
  "function balanceOf(address owner) view returns (uint)",

  // 事件
  "event Transfer(address indexed from, address indexed to, uint256 amount)",

  // 自定义的 Solidity Error
  "error AccountLocked(address owner, uint256 balance)",

  // 带有结构体类型的例子
  "function addUser(tuple(string name, address addr) user) returns (uint id)",
  "function addUsers(tuple(string name, address addr)[] user) returns (uint[] id)",
  "function getUser(uint id) view returns (tuple(string name, address addr) user)"
]);

//_hide: _page.iface = iface;

_subsection: 属性 @<Interface--properties>

_property: interface.fragments => Array<[[Fragment]]>
接口中所有的[Fragments](Fragment)。

_property: interface.errors => Array<[[ErrorFragment]]>
接口中所有的[Error Fragments](ErrorFragment)。

_property: interface.events => Array<[[EventFragment]]>
接口中所有的[Event Fragments](EventFragment)。

_property: interface.functions => Array<[[FunctionFragment]]>
接口中所有的[Function Fragments](FunctionFragment)。

_property: interface.deploy => [[ConstructorFragment]]
接口中所有的[Constructor Fragments](ConstructorFragment)。


_subsection: 格式化 @<Interface--formatting>

_property: interface.format( [ format ]) => string | Array<string> @SRC<abi/interface>
返回格式化的**接口**。如果格式类型是``json``，则返回一个字符串，否则返回一个由human-readable（人类可读）字符串组成的数组。

_code: @lang<javascript>

//_hide: const iface = _page.iface;

const FormatTypes = ethers.utils.FormatTypes;

//_result:
iface.format(FormatTypes.json)
//_log:

//_result:
iface.format(FormatTypes.full)
//_log:

//_result:
iface.format(FormatTypes.minimal)
//_log:

_subsection: Fragment Access @<Interface--fragments>

_property: interface.getFunction(fragment) => [[FunctionFragment]]  @SRC<abi/interface>
返回//fragment//的[[FunctionFragment]](参考[[Interface--specifying-fragments]])。

_code: @lang<javascript>

//_hide: const iface = _page.iface;

// 通过方法(method)的签名，这是经过标准化后的，因此空格和多余的属性会被舍去

iface.getFunction("transferFrom(address, address, uint256)");

// 通过name的方式;这只在方法名称是唯一确定的情况下才有效
iface.getFunction("transferFrom");

// 通过函数选择器
iface.getFunction("0x23b872dd");

// 如果方法不存在将抛出异常
//_throws:
iface.getFunction("doesNotExist()");
//_log:

_property: interface.getError(fragment) => [[ErrorFragment]] @SRC<abi/interface>
返回fragment的[[ErrorFragment]](参考[[Interface--specifying-fragments]])。

_code: @lang<javascript>

//_hide: const iface = _page.iface;
// 通过错误(error)的签名，这是经过标准化后的，因此空格和多余的属性会被舍去
iface.getError("AccountLocked(address, uint256)");

// 通过name的方式;这只在方法名称是唯一确定的情况下才有效
iface.getError("AccountLocked");

// 通过error的选择器
iface.getError("0xf7c3865a");

// 如果方法不存在将抛出异常
//_throws:
iface.getError("DoesNotExist()");
//_log:

_property: interface.getEvent(fragment) => [[EventFragment]] @SRC<abi/interface>
返回//fragment//的[[EventFragment]](参考[[Interface--specifying-fragments]])。

_code: @lang<javascript>

//_hide: const iface = _page.iface;

// 通过事件(event)的签名，这是经过标准化后的，因此空格和多余的属性会被舍去
iface.getEvent("Transfer(address, address, uint256)");

// 通过name的方式;这只在方法名称是唯一确定的情况下才有效
iface.getEvent("Transfer");

// 通过事件topic哈希
iface.getEvent("0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef");

// 如果方法不存在将抛出异常
//_throws:
iface.getEvent("DoesNotExist()");
//_log:

_subsection: 签名(Signature) 和 主题(Topic) 的哈希 @<Interface--selectors>

_property: interface.getSighash(fragment) => string<[[DataHexString]]<4>> @SRC<abi/interface:method.Interface.getSighash>
返回//fragment//的签名哈希(sighash)或函数选择器(Function Selector)(参考[[Interface--specifying-fragments]])。

_code: @lang<javascript>

//_hide: const iface = _page.iface;

//_result:
iface.getSighash("balanceOf");
//_log:

//_result:
iface.getSighash("balanceOf(address)");
//_log:

const fragment = iface.getFunction("balanceOf")
//_result:
iface.getSighash(fragment);
//_log:

_property: interface.getEventTopic(fragment) => string<[[DataHexString]]<32>> @SRC<abi/interface:method.Interface.getEventTopic>
返回//fragment//的主题哈希(topic hash)(参考[[Interface--specifying-fragments]])。

_code: @lang<javascript>

//_hide: const iface = _page.iface;

//_result:
iface.getEventTopic("Transfer");
//_log:

//_result:
iface.getEventTopic("Transfer(address, address, uint)");
//_log:

const fragment = iface.getEvent("Transfer")
//_result:
iface.getEventTopic(fragment);
//_log:

_subsection: 编码数据 @<Interface--encoding>

_property: interface.encodeDeploy([ values ]) => string<[[DataHexString]]> @SRC<abi/interface>
返回已编码的部署数据，这些数据可以连接到合约的部署字节码，以便将//值(values)//传递到合约构造函数中。

_code: @lang<javascript>

//_hide: const iface = _page.iface;
//_hide: const parseEther = ethers.utils.parseEther;

// 这些数据表示的是在部署期间应该追加到字节码形式的构造函数的参数
//_result:
iface.encodeDeploy([ "SYM", "Some Name" ])
//_log:

_property: interface.encodeErrorResult(fragment [ , values ]) => string<[[DataHexString]]> @SRC<abi/interface>
返回编码后的错误结果，这通常是对给定值的fragment(参考[[Interface--specifying-fragments]]))的reverted调用的响应结果。

大多数开发人员将不需要此方法，但对于那些模拟自己的区块链的开发人员很有用。

_code: @lang<javascript>

//_hide: const iface = _page.iface;
//_hide: const parseEther = ethers.utils.parseEther;

// 编码结果数据(像在revert期间被eth_call返回)

//_result:
iface.encodeErrorResult("AccountLocked", [
  "0x8ba1f109551bD432803012645Ac136ddd64DBA72",
  parseEther("1.0")
]);
//_log:

_property: interface.encodeFilterTopics(fragment, values) => Array<topic | Array<topic>> @SRC<abi/interface>
返回已编码的主题过滤器，可以在//fragment//(参考[[Interface--specifying-fragments]])将values值传递给getLogs函数。

每个主题是一个32字节(64nibble)的[[DataHexString]]。

_code: @lang<javascript>

//_hide: const iface = _page.iface;
//_hide: const parseEther = ethers.utils.parseEther;

// 匹配的Transfer事件的过滤器
//_result:
iface.encodeFilterTopics("Transfer", [])
//_log:

// 匹配的sender的过滤器
//_result:
iface.encodeFilterTopics("Transfer", [
  "0x8ba1f109551bD432803012645Ac136ddd64DBA72"
])
//_log:

// 匹配receiver的过滤器
//_result:
iface.encodeFilterTopics("Transfer", [
  null,
  "0x8ba1f109551bD432803012645Ac136ddd64DBA72"
])
//_log:

_property: interface.encodeFunctionData(fragment [ , values ]) => string<[[DataHexString]]> @SRC<abi/interface>
返回编码后的数据，可以在//fragment//(参考[[Interface--specifying-fragments]])指定values值，这个数据用作交易的data中。

_code: @lang<javascript>

//_hide: const iface = _page.iface;
//_hide: const parseEther = ethers.utils.parseEther;

// 编码数据，用于交易或调用的tx.data
//_result:
iface.encodeFunctionData("transferFrom", [
  "0x8ba1f109551bD432803012645Ac136ddd64DBA72",
  "0xaB7C8803962c0f2F5BBBe3FA8bf41cd82AA1923C",
  parseEther("1.0")
])
//_log:

// 使用 positional 数组编码结构体数据
user = [
   "Richard Moore",
   "0x8ba1f109551bD432803012645Ac136ddd64DBA72"
];
//_result:
iface.encodeFunctionData("addUser", [ user ]);
//_log:

// 使用对象的方式编码结构体数据，只有参数被命名才可用
user = {
   name: "Richard Moore",
   addr: "0x8ba1f109551bD432803012645Ac136ddd64DBA72"
};
//_result:
iface.encodeFunctionData("addUser", [ user ]);
//_log:

_property: interface.encodeFunctionResult(fragment [ , values ]) => string<[[DataHexString]]> @SRC<abi/interface>


Most developers will not need this method, but may be useful for authors of a mock blockchain.
返回编码后的结果，这通常是对给定值的fragment(参考[[Interface--specifying-fragments]]))的调用的响应结果。

大多数开发人员将不需要此方法，但对于那些模拟自己的区块链的开发人员很有用。
_code: @lang<javascript>

//_hide: const iface = _page.iface;
//_hide: const parseEther = ethers.utils.parseEther;

// 编码 result 数据 (像被eth_call后的返回结果数据)
//_result:
iface.encodeFunctionResult("balanceOf", [
  "0x8ba1f109551bD432803012645Ac136ddd64DBA72"
])
//_log:


_subsection: 解码数据 @<Interface--decoding>

_property: interface.decodeErrorResult(fragment, data) => [[Result]] @SRC<abi/interface>
在对给定//数据//的fragment(参考[[Interface--specifying-fragments]]))revert期间，返回此调用的结果中已解码的值。

大多数开发人员不需要这个数据，因为如果数据表示revert，``decodeFunctionResult``将自动解码errors。

_code: @lang<javascript>

//_hide: const iface = _page.iface;

// 解码Result数据(例如eth_call)
errorData = "0xf7c3865a0000000000000000000000008ba1f109551bd432803012645ac136ddd64dba720000000000000000000000000000000000000000000000000de0b6b3a7640000";

//_result:
iface.decodeErrorResult("AccountLocked", errorData)
//_log:

_property: interface.decodeEventLog(fragment, data [ , topics ]) => [[Result]] @SRC<abi/interface>
从事件日志中为带有可选//主题(topics)//的给定数据fragment(参考[[Interface--specifying-fragments]]))返回已解码的事件值。

如果没有指定//主题(topics)//，将在结果中插入占位符。

大多数开发人员会发现[parsing methods](Interface--parsing)更便于解码事件数据，因为它们会自动检测匹配的事件。

_code: @lang<javascript>

//_hide: const iface = _page.iface;

// 解码日志和主题数据 (在整个收据中)
const data = "0x0000000000000000000000000000000000000000000000000de0b6b3a7640000";
const topics = [
  "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
  "0x0000000000000000000000008ba1f109551bd432803012645ac136ddd64dba72",
  "0x000000000000000000000000ab7c8803962c0f2f5bbbe3fa8bf41cd82aa1923c"
];

//_result:
iface.decodeEventLog("Transfer", data, topics);
//_log:

_property: interface.decodeFunctionData(fragment, data) => [[Result]] @SRC<abi/interface>
对于给定数据fragment(参考[[Interface--specifying-fragments]]))，从交易数据中返回已解码的值。

大多数开发人员不需要这个方法，但是对于调试或检查交易可能很有用。

大多数开发人员还会发现[parsing methods](Interface--parsing)对于解码交易数据更方便，因为它们会自动检测匹配的函数。

_code: @lang<javascript>

//_hide: const iface = _page.iface;

// 解码函数数据(tx.data的值)
const txData = "0x23b872dd0000000000000000000000008ba1f109551bd432803012645ac136ddd64dba72000000000000000000000000ab7c8803962c0f2f5bbbe3fa8bf41cd82aa1923c0000000000000000000000000000000000000000000000000de0b6b3a7640000";
//_result:
iface.decodeFunctionData("transferFrom", txData);
//_log:

_property: interface.decodeFunctionResult(fragment, data) => [[Result]] @SRC<abi/interface>
返回给定数据的fragment(参考[[Interface--specifying-fragments]]))调用结果的解码值。

_code: @lang<javascript>

//_hide: const iface = _page.iface;

// 解码result数据(例如，来自eth_call)
resultData = "0x0000000000000000000000000000000000000000000000000de0b6b3a7640000";
//_result:
iface.decodeFunctionResult("balanceOf", resultData)
//_log:

// 解码由revert触发的result数据
// 抛出一个CALL_EXCEPTION，具有额外的信息
errorData = "0xf7c3865a0000000000000000000000008ba1f109551bd432803012645ac136ddd64dba720000000000000000000000000000000000000000000000000de0b6b3a7640000";
//_throws:
iface.decodeFunctionResult("balanceOf", errorData)
//_log:

// 解码结构体数据将返回一个Result对象，该对象将按位置包含所有值，如果ABI包含names，则值还将通过names使用。
resultData = "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000400000000000000000000000008ba1f109551bd432803012645ac136ddd64dba72000000000000000000000000000000000000000000000000000000000000000d52696368617264204d6f6f726500000000000000000000000000000000000000";
//_result:
result = iface.decodeFunctionResult("getUser", resultData);
//_log:

// 位置访问:下标为0的输出参数，结构体的第一个属性
//_result:
result[0][0];
//_log:

// 通过name访问:(仅当因为参数已命名才可用)
//_result:
result.user.name
//_log:

_subsection: 解析(Parsing) @<Interface--parsing>
对于大多数开发人员来说，这些函数通常是最有用的。
它们将自动在ABI中搜索匹配的事件(Event)或函数(Function)，并将组件解码为完整的描述信息。

_property: interface.parseError(data) => [[ErrorDescription]] @SRC<abi/interface>
在//数据//中搜索与错误选择器匹配的错误，并解析出详细信息。

_code: @lang<javascript>

//_hide: const iface = _page.iface;

const data = "0xf7c3865a0000000000000000000000008ba1f109551bd432803012645ac136ddd64dba720000000000000000000000000000000000000000000000000de0b6b3a7640000";

//_result:
iface.parseError(data);
//_hide: _.errorFragment = createClass("ErrorFragment");
//_log:

_property: interface.parseLog(log) => [[LogDescription]] @SRC<abi/interface>
搜索与//日志//主题哈希匹配的事件，并解析日志表示的值。

_code: @lang<javascript>

//_hide: const iface = _page.iface;

const data = "0x0000000000000000000000000000000000000000000000000de0b6b3a7640000";
const topics = [
  "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
  "0x0000000000000000000000008ba1f109551bd432803012645ac136ddd64dba72",
  "0x000000000000000000000000ab7c8803962c0f2f5bbbe3fa8bf41cd82aa1923c"
];

//_result:
iface.parseLog({ data, topics });
//_hide: _.eventFragment = createClass("EventFragment");
//_log:

_property: interface.parseTransaction(transaction) => [[TransactionDescription]] @SRC<abi/interface>
搜索与//交易//数据签名哈希匹配的函数，并解析出交易的属性。

_code: @lang<javascript>

//_hide: const iface = _page.iface;
//_hide: const parseEther = ethers.utils.parseEther;

const data = "0x23b872dd0000000000000000000000008ba1f109551bd432803012645ac136ddd64dba72000000000000000000000000ab7c8803962c0f2f5bbbe3fa8bf41cd82aa1923c0000000000000000000000000000000000000000000000000de0b6b3a7640000";
const value = parseEther("1.0");

//_result:
iface.parseTransaction({ data, value });
//_hide: _.functionFragment = createClass("FunctionFragment");
//_log:

_subsection: 类型(Types) @<Interface--types>

_heading: Result @<Result> @INHERIT<Array\<any\>>
一个**Result**是一个数组，因此每个值都可以作为位置参数访问。

此外，如果值已命名，则可以通过名称访问与其位置值相同的对象。

但是对象中的name为``length``是不可用的，因为它是Array的一部分，
所以这个键的任何命名值都被重命名为_length。

如果存在名称冲突，则只有第一个键可用。


_heading: ErrorDescription @<ErrorDescription>

_property: errorDescription.args => [[Result]]
error的输入参数的值。

_property: errorDescription.errorFragment => [[ErrorFragment]]
与数据中选择器匹配的[[ErrorFragment]]。


_property: errorDescription.name => string
error的name。(例如``AccountLocked``)

_property: errorDescription.signature => string
error的签名。(例如``AccountLocked(address,uint256)``)

_property: errorDescription.sighash => string
error的选择器(selector)。


_heading: LogDescription @<LogDescription>

_property: logDescription.args => [[Result]]
事件的输入参数的值。

_property: logDescription.eventFragment => [[EventFragment]]
与日志中的主题匹配的[[EventFragment]]。

_property: logDescription.name => string
事件的名称。(例如``Transfer``)

_property: logDescription.signature => string
事件的签名。(如``Transfer(address,address,uint256)``)

_property: logDescription.topic => string
主题的哈希。(topic hash)


_heading: TransactionDescription @<TransactionDescription>

_property: transactionDescription.args => [[Result]]
从交易数据的输入参数中解码出来的值。

_property: transactionDescription.functionFragment => [[FunctionFragment]]
交易数据中的与签名哈希匹配的[[FunctionFragment]]。

_property: transactionDescription.name => string
函数的名称。(如``transfer``)

_property: transactionDescription.sighash => string
匹配交易数据的签名哈希(或函数选择器)。

_property: transactionDescription.signature => string
函数的签名。(如``transfer(address,uint256)``)

_property: transactionDescription.value => [[BigNumber]]
交易的value值(以太币). 

_subsection: Specifying Fragments @<Interface--specifying-fragments>

当指定一个fragment到**接口**中的函数时，可以使用以下任意一个:

- 事件或函数的**名称(name)**，如果它在ABI中是唯一确定无歧义(non-ambiguous,例如``transfer``)
- 事件或函数的签名。签名是标准化的，例如``uint``和``uint256``是等价的(例如``transfer(address, uint)``)
- 函数的 **签名哈希** 或 **主题哈希** 。签名哈希通常指的是Solidity中的函数选择器(例如``0xa9059cbb``)
- 一个[[Fragment]]
