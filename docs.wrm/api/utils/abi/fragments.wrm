_section: Fragments  @<fragments>

对一个ABI进行描述解释。

_subsection: Formats

_heading: JSON String ABI (Solidity 输出 JSON)
**JSON ABI Format** 是[Solidity 编译器输出的格式](link-solc-output).

JSON序列化的对象总是一个字符串，它表示一个对象数组，其中每个对象都有描述ABI[[Fragment]] 的各种属性。

对JSON字符串(一个普通的JavaScript对象)进行反序列化也可以传递给任何接受JSON string ABI的函数。


_heading: Humanb-Readable ABI @<human-readable-abi>
**Human-Readable ABI** 是[本文](link-ricmoo-humanreadableabi)中由ethers引入的，并依据得到了广泛的采用。

ABI是通过使用字符串数组来描述的，其中每个字符串都是**构造函数**、**函数**、**事件**或**错误**的solididity式签名。

当解析一个片段(fragment) 时，所有的填写的属性都将被注入(例如，一个//payable//的函数方法将其``constant``属性设置为false)。

元组可以通过使用``tuple(...)``语法或使用空括号``(...)``来指定。

_code: Example Human-Readable ABI

const ABI = [
  // Constructor
  "constructor(address ens)",

  // Constant functions (pure or view)
  "function balanceOf(address owner) view returns (uint)",

  // State-mutating functions (payable or non-payable)
  "function mint(uint amount) payable",
  "function transfer(address to, uint amount) returns (bool)",

  // Events
  "event Transfer(address indexed from, address indexed to, uint amount)",

  // Errors
  "error InsufficientFunds(address from, uint balance)",
]


_heading: Output Formats @<fragments--output-formats> @SRC<abi/fragments:FormatTypes>
每个[[Fragment]]和[[ParamType]]可以使用其``format``方法输出。

_property: ethers.utils.FormatTypes.full => string
这是一个完整的人类可读(human-readable)的字符串，包括所有的参数名，任何可选的修饰符(例如，``indexed``，``public``等)和空格，以提高代码可读性。

_property: ethers.utils.FormatTypes.minimal => string
这类似于``full``，除了没有不必要的空白或参数名。这对于存储最小的字符串非常有用，该字符串仍然可以使用[Fragment&thinsp;.&thinsp;from](Fragment-from)，
从完全重构原始的Fragment。

_property: ethers.utils.FormatTypes.json => string
这将返回一个JavaScript对象，安全地调用``JSON.stringify``创建一个JSON字符串。

_property: ethers.utils.FormatTypes.sighash => string
一个最小的输出格式，Solidity在计算签名哈希或事件主题topic的哈希时使用它。

_warning: 注意
``sighash`` 格式**不足以**重新创建原始的[[Fragment]]，因为它舍弃了indexed, anonymous, stateMutability等修饰符。

它只用于为Fragment去计算 选择器(selector)，不能用于格式化接口。

_subsection: Fragment @<Fragment> @SRC<abi/fragments:class.Fragment>
一个ABI是**Fragments**的集合，每个fragment指定:

- 一个 [错误](ErrorFragment)
- 一个 [事件](EventFragment)
- 一个 [函数](FunctionFragment)
- 一个 [构造函数](ConstructorFragment)

_heading: Properties

_property: fragment.name => string
事件或函数的name。如果是[[ConstructorFragment]]时为null。

_property: fragment.type => string
这是一个表示[[Fragment]]类型的字符串。如:

- ``constructor``
- ``event``
- ``function``

_property: fragment.inputs => Array<[[ParamType]]>
构造函数、事件等输入参数的[[ParamType]]的数组。

_heading: Methods

_property: fragment.format([ format = sighash]) => string @<Fragment-format> @SRC<abi/fragments:Fragment.format>
使用可用的[输出格式](fragments--output-formats)创建Fragment的字符串描述。

_property: ethers.utils.Fragment.from(objectOrString) => [[Fragment]] @<Fragment-from> @SRC<abi/fragments:Fragment.from>
从任何兼容的//bject或String//创建一个新的**Fragment**子类。

_property: ethers.utils.Fragment.isFragment(object) => boolean @<Fragment-isFragment> @SRC<abi/fragments:Fragment.isFragment>
如果//object// 是一个**Fragment**返回true。

_subsection: ConstructorFragment @<ConstructorFragment> @INHERIT<[[Fragment]]> @SRC<abi/fragments:class.ConstructorFragment>

_heading: Properties

_property: fragment.gas => [[BigNumber]]
表示部署期间应该使用的gas limit。它可以是null。

_property: fragment.payable => boolean
表示构造函数在部署期间是否可以接收ether(例如msg。msg.value != 0)。

_property: fragment.stateMutability => string
构造函数的state mutability。它可以是:

- ``nonpayable``
- ``payable``

_heading: Methods

_property: ethers.utils.ConstructorFragment.from(objectOrString) => [[ConstructorFragment]] @<ConstructorFragment-from> @SRC<abi/fragments:ConstructorFragment.from>
从任何兼容的//object或String//创建一个新的**ConstructorFragment**。

_property: ethers.utils.ConstructorFragment.isConstructorFragment(object) => boolean @<ConstructorFragment-isConstructorFragment> @SRC<abi/fragments:ConstructorFragment.isConstructorFragment>
如果//object// 是一个 **ConstructorFragment**返回true。

_subsection: ErrorFragment @<ErrorFragment> @INHERIT<[[Fragment]]> @SRC<abi/fragments:class.ErrorFragment>

_heading: Methods

_property: ethers.utils.ErrorFragment.from(objectOrString) => [[ErrorFragment]] @<ErrorFragment-from> @SRC<abi/fragments:ErrorFragment.from>
从任何兼容的//object或String//创建一个新的**ErrorFragment**。

_property: ethers.utils.ErrorFragment.isErrorFragment(object) => boolean @<ErrorFragment-isErrorFragment> @SRC<abi/fragments:ErrorFragment.isErrorFragment>
如果//object// 是一个 **ErrorFragment**返回true。

_subsection: EventFragment @<EventFragment> @INHERIT<[[Fragment]]> @SRC<abi/fragments:class.EventFragment>

_heading: Properties

_property: fragment.anonymous => boolean
表示事件(event)是否匿名。匿名事件在创建日志时不会将其topic哈希值注入到topic0中。

_heading: Methods

_property: ethers.utils.EventFragment.from(objectOrString) => [[EventFragment]] @<EventFragment-from> @SRC<abi/fragments:EventFragment.from>
从任何兼容的//object或String//创建一个新的**EventFragment**。

_property: ethers.utils.EventFragment.isEventFragment(object) => boolean @<EventFragment-isEventFragment> @SRC<abi/fragments:EventFragment.isEventFragment>
如果//object// 是一个 **EventFragment**返回true。

_subsection: FunctionFragment @<FunctionFragment> @INHERIT<[[ConstructorFragment]]> @SRC<abi/fragments:class.FunctionFragment>

_heading: Properties

_property: fragment.constant => boolean
表示函数是否为常量(即不改变状态)。如果设为true表示状态可变性是``pure`` 或 ``view``。

_property: fragment.stateMutability => string
构造器的状态可变性。它可以是:

- ``nonpayable``
- ``payable``
- ``pure``
- ``view``

_property: fragment.outputs => Array<[[ParamType]]>
函数输出参数的列表。

_heading: Methods

_property: ethers.utils.FunctionFragment.from(objectOrString) => [[FunctionFragment]] @<FunctionFragment-from> @SRC<abi/fragments:ConstructorFragment.from>
从任何兼容的//object或String//创建一个新的**FunctionFragment**。

_property: ethers.utils.FunctionFragment.isFunctionFragment(object) => boolean @<FunctionFragment-isFunctionFragment> @SRC<abi/fragments:FunctionFragment.isFunctionFragment>
如果//object// 是一个 **FunctionFragment** 返回true。


_subsection: ParamType @<ParamType> @SRC<abi/fragments:class.ParamType>
下面的例子将表示Solidity中的参数:

``string foobar``

_heading: Properties

_property: paramType.name => string @<ParamType-name>
本地参数名。对于未命名的参数，这个值为null。例如，参数字符串``string foobar``会输出``foobar``。

_property: paramType.type => string @<ParamType-type>
参数的完整类型，包括元组和数组符号。对于未命名的参数，这个值可能为null。对于上面的例子，将输出``foobar``。

_property: paramType.baseType => string @<ParamType-baseType>
参数的基类型(base type)。对于原始类型(例如``address``, ``uint256``等)，这等同于[type](ParamType-type)。
对于数组，它将是string ``array``，对于元组，它将是string ``tuple``。

_property: paramType.indexed => boolean @<ParamType-indexed>
参数是否被标记为索引。这**只**适用于参数是[[EventFragment]]的部分。

_property: paramType.arrayChildren => [[ParamType]] @<ParamType-arrayChildren>
数组的children类型。对于任何非数组的参数，这将是null。

_property: paramType.arrayLength => number @<ParamType-arrayLength>
数组的长度，或动态数组的长度``-1``。对于不是数组的参数，这个值为null。

_property: paramType.components => Array<[[ParamType]]> @<ParamType-components>
元组的组成部分。这对于非元组参数是null。

_heading: Methods

_property: paramType.format([ outputType = sighash ])
使用可用的[output formats](fragments--output-formats)创建Fragment的字符串描述。

_property: ethers.utils.ParamType.from(objectOrString) => [[ParamType]] @<ParamType-from> @SRC<abi/fragments:ParamType.from>
从任何兼容的//object或String//创建一个新的**ParamType**。

_property: ethers.utils.ParamType.isParamType(object) => boolean @<ParamType-isParamType> @SRC<abi/fragments:ParamType.isParamType>
如果//object// 是一个**ParamType**返回true。
