_section: 签名密钥 @<SigningKey>

_property: new ethers.utils.SigningKey(privateKey)  @<SigningKey-constructor> @src<signing-key:constructor.SigningKey>
为//私钥//创建一个新的签名密钥。

_property: signingKey.privateKey => string<[[DataHexString]]<32>>
签名密钥的私钥。

_property: signingKey.publicKey => string<[[DataHexString]]<65>>
此签名密钥的未压缩公钥。它是65个字节(130个nibbles)，并以``0x04``作为开头。

_property: signingKey.compressedPublicKey => string<[[DataHexString]]<33>>
此签名密钥的压缩公钥。它是33个字节(66个nibbles)，并以``0x02``或``0x03``作为开头。

_property: signingKey.signDigest(digest) => [[Signature]]
在//摘要//上签名并返回签名。

_property: signingKey.computeSharedSecret(otherKey) => string<[[DataHexString]]<32>>  @SRC<signing-key>
使用//otherKey//计算ECDH共享密钥。//otherKey//可以是公钥或私钥，但通常是来自另一方的公钥。

非常推荐各方在将其用作对称密钥之前计算其哈希。

_property: SigningKey.isSigningKey(anObject) => boolean  @SRC<signing-key>
如果//anObject//是签名密钥则返回true。

_subsection: Other Functions

_property: ethers.utils.verifyMessage(message, signature) => string<[[address]]>  @<utils-verifyMessage> @SRC<wallet>
返回生成//签名//的//消息//的地址。签名可能有一个不规范的v(即不需要是27或28)，
在这种情况下，它将被标准化去计算`recoveryParam`，然后将用于计算地址；
这允许使用v编码额外数据(如[EIP-155](link-eip-155))的系统使用，因为v参数是完全明确的。

_property: ethers.utils.verifyTypedData(domain, types, value, signature) => string<[[address]]>  @<utils-verifyTypedData> @SRC<wallet>
返回为//domain//和生成签名的//types//签名[[link-eip-712]]后的//value//的地址。

_property: ethers.utils.recoverPublicKey(digest, signature) => string<[[DataHexString]]<65>> @<utils-recoverPublicKey>
返回对给出签名的摘要进行签名的私钥的未压缩公钥(即第一个字节将为``0x04``)。

_property: ethers.utils.computePublicKey(key [, compressed = false ]) => string<[[DataHexString]]> @<utils-computePublicKey>
计算//key//的公钥，压缩选项是可选的。//key//可以是任何形式的公钥(压缩或未压缩)或私钥。
