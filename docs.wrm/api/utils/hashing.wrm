_section: 哈希算法 @<hashing-algorithms>
在整个区块链空间中使用了许多哈希算法，对于一些复杂的用法可以使用utilities工具来简化这些操作。

_subsection: 加密哈希函数 @<cryptographic-hash-functions>
[加密哈希函数](link-wiki-cryptographichash)是一个特定的哈希函数家族。

_property: ethers.utils.id(text) => string<[[DataHexString]]<32>>  @<utils-id> @SRC<hash>
以太坊身份函数(Ethereum Identity function)计算//文本//字节[KECCAK256](link-wiki-sha3)哈希值。

_property:  ethers.utils.keccak256(aBytesLike) => string<[[DataHexString]]<32>>  @<utils-keccak256> @SRC<keccak256>
返回//aBytesLike//的[KECCAK256](link-wiki-sha3)摘要(digest)。

_property: ethers.utils.ripemd160(aBytesLike) => string<[[DataHexString]]<20>>  @<utils-ripemd160> @SRC<sha2>
返回//aBytesLike//的[RIPEMD-160](link-wiki-ripemd)摘要(digest)。

_property: ethers.utils.sha256(aBytesLike) => string<[[DataHexString]]<32>>  @<utils-sha256> @SRC<sha2:function.sha256>
返回//aBytesLike//的[SHA2-256](link-wiki-sha2)摘要(digest)。

_property: ethers.utils.sha512(aBytesLike) => string<[[DataHexString]]<64>>  @<utils-sha512> @SRC<sha2:function.sha512>
返回//aBytesLike//的[SHA2-512](link-wiki-sha2)摘要(digest)。

_code: KECCAK256 @lang<javascript>

//_result:
utils.keccak256([ 0x12, 0x34 ])
//_log:

//_result:
utils.keccak256("0x")
//_log:

//_result:
utils.keccak256("0x1234")
//_log:

// value 必须是 data，比如:
//  - numbers数组
//  - 十六进制字符串 (如 "0x1234")
//  - Uint8Array

// 不要使用非十六进制的 UTF-8 字符串
//_throws:
utils.keccak256("hello world")
//_log:

// 如果确实要使用非十六进制的 UTF-8 字符串，请先转换成字节(bytes):
//_result:
utils.keccak256(utils.toUtf8Bytes("hello world"))
//_log:

// 等价于使用身份函数(identity function):
//_result:
utils.id("hello world")
//_log:

// 请记住字符串 "0x1234" 表示两个字节(即 [ 0x12, 0x34 ]. If you wish to compute the
// 如果你想要计算6个字符("0x1234")的哈希，请先通过utils.toUtf8Bytes转换成 UTF-8 字节

// 参考下述例子:

// 2个字节的哈希
//_result:
utils.keccak256("0x1234")
//_log:

// 2个字节的哈希，与上结果相同
//_result:
utils.keccak256([ 0x12, 0x34 ])
//_log:

//_result:
bytes = utils.toUtf8Bytes("0x1234")
//_log:

// 6个字符的哈希，与上结果不同
//_result:
utils.keccak256(bytes)
//_log:

// 6个字符的哈希
//_result:
utils.id("0x1234")
//_log:

_code: RIPEMD160  @lang<javascript>

//_result:
utils.ripemd160("0x")
//_log:

//_result:
utils.ripemd160("0x1234")
//_log:

_code: SHA-2  @lang<javascript>

//_result:
utils.sha256("0x")
//_log:

//_result:
utils.sha256("0x1234")
//_log:

//_result:
utils.sha512("0x")
//_log:

//_result:
utils.sha512("0x1234")
//_log:


_subsection: HMAC @<utils--hmac>

_property: ethers.utils.computeHmac(algorithm, key, data) => string<[[DataHexString]]>  @<utils-computeHmac> @SRC<sha2>
使用[Algorithm](utils--hmac-supported-algorithm)算法返回 带有key的 [HMAC](link-wiki-hmac)data数据。

_heading: **HMAC Supported Algorithms** @<utils--hmac-supported-algorithm> @SRC<sha2:enum.SupportedAlgorithm>

_property: ethers.utils.SupportedAlgorithm.sha256 => string
使用[SHA2-256](link-wiki-sha2)哈希算法。

_property: ethers.utils.SupportedAlgorithm.sha512 => string
使用[SHA2-512](link-wiki-sha2)哈希算法。

_code: HMAC  @lang<javascript>

const key = "0x0102"
const data = "0x1234"
//_result:
utils.computeHmac("sha256", key, data)
//_log:


_subsection: Hashing Helpers @<utils--hashing-helpers>

_property: ethers.utils.hashMessage(message) => string<[[DataHexString]]<32>>  @<utils-hashMessage> @SRC<hash>
计算//message//的[[link-eip-191]]个人信息摘要。
个人消息被转换为UTF-8字节，并以``\\x19Ethereum Signed Message:``和//message//的length为前缀。

_code: Hashing Messages  @lang<javascript>

// 对字符串信息进行哈希
//_result:
utils.hashMessage("Hello World")
//_log:

// 对二进制数据进行哈希 (以下是字节类型的"Hello World")
//_result:
utils.hashMessage( [ 72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100 ])
//_log:

// 注意:理解字符串和二进制数据的不同处理方式是很重要的
// 字符串总是作为字符串形式的字节进行处理，所以必须首先将十六进制字符串转换为类似数组的对象

//首先转换为类数组对象。
// 对一个十六进制字符串哈希等同于对字符串直接哈希
// 注意: 这是对4个字符 [ '0', 'x', '4', '2' ] 进行哈希
//_result:
utils.hashMessage("0x42")
//_log:

// 对二进制数据进行哈希
// 注意: 这是对一个字节 [ 0x42 ] 进行哈希
//_result:
utils.hashMessage([ 0x42 ])
//_log:

// 对二进制数据进行哈希
// 注意: 这也等同于对一个字节 [ 0x42 ] 进行哈希
//_result:
utils.hashMessage(utils.arrayify("0x42"))
//_log:


_property: ethers.utils.namehash(name) => string<[[DataHexString]]<32>>  @<utils-namehash> @SRC<hash>
返回[ENS Namehash](link-namehash)的//name//。

_code: Namehash  @lang<javascript>

//_result:
utils.namehash("")
//_log:

//_result:
utils.namehash("eth")
//_log:

//_result:
utils.namehash("ricmoo.firefly.eth")
//_log:

//_result:
utils.namehash("ricmoo.xyz")
//_log:

_heading: Typed Data Encoder @<TypedDataEncoder> @SRC<hash:class.TypedDataEncoder>
**TypedDataEncoder**用于计算[[link-eip-712]]签名的各种编码数据。

签名数据需要域(domain)、结构成员列表和数据本身。

**domain**是一个具有任何标准域属性值的对象。

**types**是一个对象，每个属性都是一个结构的名称，映射到一个字段描述数组。
它不应该包含``EIP712Domain``属性，除非它需要作为另一个签名数据的子结构。

_note: 实验特性 (导出的类名将会改变)
这是一个实验特性。如果你要使用，请指定 ethers **确切**的版本 
(例如指定``"5.0.18"``, **而不是** ``"^5.0.18"``) 
一旦它在字段中被使用，导出的类名将``_TypedDataEncoder``重命名为``TypedDataEncoder``

_property: ethers.utils._TypedDataEncoder.from(types) => [TypedDataEncoder] @<TypedDataEncoder-from> @SRC<hash:TypedDataEncoder.from>
为//types//创建一个新的**TypedDataEncoder**。
这个对象是一个相当低级的对象，大多数开发人员不应该直接使用实例。

大多数开发人员会发现下面的静态类方法更有用。

_property: TypedDataEncoder.encode(domain, types, values) => string @<TypedDataEncoder-encode> @SRC<hash:staticmethod.TypedDataEncoder.encode>
编码并返回经过哈希处理的[[link-eip-712]] domain。

_property: TypedDataEncoder.getPayload(domain, types, value) => any @<TypedDataEncoder-getPayload> @SRC<hash:TypedDataEncoder.getPayload>
返回各种JSON-RPC ``eth_signTypedData*``调用所使用的标准payload。

domain和value的值都会被标准化(normalized)，并对types的内容进行验证。

_property: TypedDataEncoder.getPrimaryType(types) => string @<TypedDataEncoder-getPrimaryType> @SRC<hash:TypedDataEncoder.getPrimaryType>
构造一个types的有向无环图并返回root type，root type可以用作[[link-eip-712]]payloads的**primaryType**。

_property: TypedDataEncoder.hash(domain, types, values) => string<[[DataHexString]]<32>> @<TypedDataEncoder-hash> @SRC<hash:staticmethod.TypedDataEncoder.hash>
返回计算后的[[link-eip-712]]哈希。

_property: TypedDataEncoder.hashDomain(domain) => string<[[DataHexString]]<32>> @<TypedDataEncoder-hashDomain> @SRC<hash:TypedDataEncoder.hashDomain>
返回[[link-eip-712]] domain的哈希。

_property: TypedDataEncoder.resolveNames(domain, types, value, resolveName) => Promise<any> @<TypedDataEncoder-resolveNames> @SRC<hash:TypedDataEncoder.resolveNames>
返回value的副本，其中任何具有``地址(address)``类型的leaf value都将被递归地替换为value的//resolveName//调用的值。

_code: Typed Data 例子 @lang<javascript>

//_hide: TypedDataEncoder = ethers.utils._TypedDataEncoder

domain = {
    name: 'Ether Mail',
    version: '1',
    chainId: 1,
    verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC'
};

// 所有types定义的name列表

types = {
    Person: [
        { name: 'name', type: 'string' },
        { name: 'wallet', type: 'address' }
    ],
    Mail: [
        { name: 'from', type: 'Person' },
        { name: 'to', type: 'Person' },
        { name: 'contents', type: 'string' }
    ]
};

// 待签名的数据
value = {
    from: {
        name: 'Cow',
        wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826'
    },
    to: {
        name: 'Bob',
        wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB'
    },
    contents: 'Hello, Bob!'
};

//_result:
TypedDataEncoder.encode(domain, types, value)
//_log:

//_result:
TypedDataEncoder.getPayload(domain, types, value)
//_log:

//_result:
TypedDataEncoder.getPrimaryType(types)
//_log:

//_result:
TypedDataEncoder.hash(domain, types, value)
//_log:

//_result:
TypedDataEncoder.hashDomain(domain)
//_log:


_subsection: Solidity 哈希算法 @<utils--solidity-hashing>
当使用Solidity ``abi.packEncoded(...)``函数时，将使用非标准(non-standard)的紧密打包(tightly packed)的编码版本。
这些函数实现了紧密打包算法(tightly packing algorithm)。

_property: ethers.utils.solidityPack(types, values) => string<[[DataHexString]]>  @<utils-solidityPack> @SRC<solidity:pack>
返回//types//中对应类型打包的非标准编码值。

_property: ethers.utils.solidityKeccak256(types, values) => string<[[DataHexString]]<32>>  @<utils-solidityKeccak256> @SRC<solidity:keccak256>
返回//types//中对应类型打包的非标准编码[KECCAK256](link-wiki-sha3)值。

_property: ethers.utils.soliditySha256(types, values) => string<[[DataHexString]]<32>>  @<utils-soliditySha256> @SRC<solidity:sha256>
返回//types//中对应类型打包的非标准编码[SHA2-256](link-wiki-sha2)值。

_code: Solidity 哈希  @lang<javascript>

//_result:
utils.solidityPack([ "int16", "uint48" ], [ -1, 12 ])
//_log:

//_result:
utils.solidityPack([ "string", "uint8" ], [ "Hello", 3 ])
//_log:

//_result:
utils.solidityKeccak256([ "int16", "uint48" ], [ -1, 12 ])
//_log:

//_result:
utils.soliditySha256([ "int16", "uint48" ], [ -1, 12 ])
//_log:



// 作为一个简单的例子，说明了solid 紧密打包不具有区分度(这就是为什么从安全的角度来看它对很多事情都不合适)，
// 下面的例子打包输出的结果是相同的，尽管它们表示的值和布局都不同。



//_result:
utils.solidityPack([ "string", "string" ], [ "hello", "world01" ])
//_log:

//_result:
utils.solidityPack([ "string", "string" ], [ "helloworld", "01" ])
//_log:

//_result:
utils.solidityPack([ "string", "string", "uint16" ], [ "hell", "oworld", 0x3031 ])
//_log:

//_result:
utils.solidityPack([ "uint96" ], [ "32309054545061485574011236401" ])
//_log:
