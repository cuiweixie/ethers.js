_section: 地址(Addresses) @<addresses>

请在此介绍地址、格式和校验和。

还可查看此处: [constants.AddressZero](constants)

_subsection: 地址格式  @<address-formats>


_heading: 地址(Address)  @<address>

一个**地址(Address)**是一个20字节(40 nibbles)的[[DataHexString]]，混合大小写(mixed case)。

如果大小写混合，它是一个**Checksum Address**，它在给定地址中使用特定的大写和小写字母模式，
以减少输入地址或剪切和粘贴问题带来的错误风险。

所有返回地址的函数将返回一个校验和地址。

_heading: ICAP Address  @<address-icap>

The **ICAP Address Format** was an early attempt to introduce a checksum
into Ethereum addresses using the popular banking industry's
[IBAN](link-wiki-iban)
format with the country code specified as **XE**.

Due to the way IBAN encodes address, only addresses that fit into 30 base-36
characters are actually compatible, so the format was adapted to support 31
base-36 characters which is large enough for a full Ethereum address, however
the preferred method was to select a private key whose address has a ``0`` as
the first byte, which allows the address to be formatted as a fully compatibly
standard IBAN address with 30 base-36 characters.

In general this format is no longer widely supported anymore, however any function that
accepts an address can receive an ICAP address, and it will be converted internally.

要将地址转换为ICAP格式，请参见[getIcapAddress](utils-getIcapAddress)。


_subsection: 转换和验证 @<utils--address>

_property: ethers.utils.getAddress(address) => string<[[address]]>  @<utils-getAddress> @SRC<address>
返回一个校验和//地址//。

如果//address//是一个无效的40-nibble [[HexString]]，或者它包含大小写混合且校验和无效，则抛出[INVALID_ARGUMENT](errors--invalid-argument)错误。

//address//的值可以是任何所支持的地址格式。

_code: @lang<javascript>

//_hide: const getAddress = ethers.utils.getAddress;

// 注入校验和(通过大写字母)
//_result:
getAddress("0x8ba1f109551bd432803012645ac136ddd64dba72");
//_log:

// 转换并注入校验和
//_result:
getAddress("XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36");
//_log:

// 如果提供了一个校验和地址，但字母是错误的情况，则抛出错误
// ------------B 应为小写字母
//_throws:
getAddress("0x8Ba1f109551bD432803012645Ac136ddd64DBA72")
//_log:

// 如果 ICAP/IBAN 校验和失败抛出错误
//_throws:
getIcapAddress("XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK37");
//_log:

// 如果地址不合法抛出错误
//_throws:
getIcapAddress("I like turtles!");
//_log:


_property: ethers.utils.getIcapAddress(address) => string<[IcapAddress](address-icap)>  @<utils-getIcapAddress> @SRC<address>
返回一个[ICAP address](link-icap)地址。
与[getAddress](utils-getAddress)具有相同的限制条件。

_code: @lang<javascript>

//_hide: const getIcapAddress = ethers.utils.getIcapAddress;

//_result:
getIcapAddress("0x8ba1f109551bd432803012645ac136ddd64dba72");
//_log:

//_result:
getIcapAddress("XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36");
//_log:

_property: ethers.utils.isAddress(address) => boolean  @<utils-isAddress> @SRC<address>
如果地址有效(任何支持的格式)则返回true。

_code: @lang<javascript>

//_hide: const isAddress = ethers.utils.isAddress;

//_result:
isAddress("0x8ba1f109551bd432803012645ac136ddd64dba72");
//_log:

//_result:
isAddress("XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36");
//_log:

//_result:
isAddress("I like turtles.");
//_log:

_subsection: Derivation @<utils--address-derivation>

_property: ethers.utils.computeAddress(publicOrPrivateKey) => string<[[address]]>  @<utils-computeAddress> @SRC<transactions>
返回//publicOrPrivateKey//的地址。公钥可以压缩或不压缩，私钥将自动转换为派生的公钥。

_code: @lang<javascript>

//_hide: const computeAddress = ethers.utils.computeAddress;

// 私钥
//_result:
computeAddress("0xb976778317b23a1385ec2d483eda6904d9319135b89f1d8eee9f6d2593e2665d");
//_log:

// 公钥 (压缩过后的)
//_result:
computeAddress("0x0376698beebe8ee5c74d8cc50ab84ac301ee8f10af6f28d0ffd6adf4d6d3b9b762");
//_log:

// 公钥 (未被压缩的)
//_result:
computeAddress("0x0476698beebe8ee5c74d8cc50ab84ac301ee8f10af6f28d0ffd6adf4d6d3b9b762d46ca56d3dad2ce13213a6f42278dabbb53259f2d92681ea6a0b98197a719be3");
//_log:

_property: ethers.utils.recoverAddress(digest, signature) => string<[[address]]>  @<utils-recoverAddress> @SRC<transactions>
使用[[link-wiki-ecrecover]]来确定摘要(digest)生成签名的公钥地址，

_code: @lang<javascript>

//_hide: const recoverAddress = ethers.utils.recoverAddress;

const digest = "0x7c5ea36004851c764c44143b1dcb59679b11c9a68e5f41497f6cf3d480715331";

// 使用一个拓展的签名
//_result:
recoverAddress(digest, {
  r: "0x528459e4aec8934dc2ee94c4f3265cf6ce00d47cf42bb106afda3642c72e25eb",
  s: "0x42544137118256121502784e5a6425e6183ca964421ecd577db6c66ba9bccdcf",
  v: 27
});
//_log:

// Using a flat Signature
const signature = "0x528459e4aec8934dc2ee94c4f3265cf6ce00d47cf42bb106afda3642c72e25eb42544137118256121502784e5a6425e6183ca964421ecd577db6c66ba9bccdcf1b";
//_result:
recoverAddress(digest, signature);
//_log:

_subsection: 合约地址 @<utils--contract-addresses>

_property: ethers.utils.getContractAddress(transaction) => string<[[address]]>  @<utils-getContractAddress> @SRC<address>
如果一个交易用于部署合约，则返回部署合约后的合约地址。

_code: @lang<javascript>

//_hide: const getContractAddress = ethers.utils.getContractAddress;

const from = "0x8ba1f109551bD432803012645Ac136ddd64DBA72";
const nonce = 5;

//_result:
getContractAddress({ from, nonce });
//_log:

_property: ethers.utils.getCreate2Address(from, salt, initCodeHash) => string<[[address]]> @<utils-getCreate2Address> @SRC<address>
返回给定[CREATE2](link-eip-1014)调用后的合约地址。

_code: @lang<javascript>

//_hide: const getCreate2Address = ethers.utils.getCreate2Address;
//_hide: const keccak256 = ethers.utils.keccak256;

const from = "0x8ba1f109551bD432803012645Ac136ddd64DBA72";
const salt = "0x7c5ea36004851c764c44143b1dcb59679b11c9a68e5f41497f6cf3d480715331";
const initCode = "0x6394198df16000526103ff60206004601c335afa6040516060f3";
const initCodeHash = keccak256(initCode);

//_result:
getCreate2Address(from, salt, initCodeHash);
//_log:


