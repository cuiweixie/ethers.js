_section: 显示逻辑和输入 @<display-logic>
当创建一个应用程序时，在用户友好的字符串(通常显示为ether)和机器可读的值(合约和数学公式所依赖的，通常使用wei)之间进行转换是很有用的

例如，一个钱包通过ether显示余额，在用户界面中用gwei显示gas价格，但是当发送一个交易时，两者都必须用wei表示。

[parseUnits](unit-conversion)是将ether表示的字符串解析成wei表示的字符串，
例如将``1.1``解析为wei表示的[BigNumber](BigNumber)，并且在用户输入值时非常有用，例如发送1.1 ether。

[formatUnits](unit-conversion)是将[BigNumberish](BigNumberish)解析成ether表示的字符串，这在显示余额时非常有用。

_subsection: 单位(Units) @<display-logic--units>

_heading: 十进制数(Decimal Count)

**Unit**可以指定为一个数字，它表示小数点位数。

**例子:**

- 1 ether 用 wei 表示， 有 **18** 个小数位 (即 1 ether 表示成 10^^18^^ wei)
- 1 bitcoin 用 Satoshi 表示，有 **8** 个小数位  (即 1 bitcoin 表示成 10^^8^^ satoshi)

_heading: 命名单位 @<display-logic--named-units>
还有几种常见的**命名单位**，ethers中 可以使用它们的name(string类型)进行操作。

_table: @STYLE<compact>

|  **Name**    |  **Decimals**  |
|  //wei//     |      0         |
|  //kwei//    |      3         |
|  //mwei//    |      6         |
|  //gwei//    |      9         |
|  //szabo//   |     12         |
|  //finney//  |     15         |
|  //ether//   |     18         |


_subsection: 功能函数 @<display-logic--functions>

_heading: 格式化 @<display-logic--formatting>

_property: ethers.utils.commify(value) => string  @<utils-commify> @SRC<units>
返回一个由3位数字组成的,并且用``,``分隔的字符串.

_code: @lang<javascript>

//_hide: const commify = ethers.utils.commify;

//_result:
commify("-1000.3000");
//_log:

_heading: 转换 @<unit-conversion>

_property: ethers.utils.formatUnits(value [ , unit = "ether" ] ) => string  @<utils-formatUnits> @SRC<units>
返回格式化后字符串形式表示的值，
如果是数字number指定，则格式化为对应的小数位数；
如果是字符串string指定，则格式化为 string name 对应的单位；。

_code: @lang<javascript>

//_hide: const formatUnits = ethers.utils.formatUnits;
//_hide: const BigNumber = ethers.BigNumber;

const oneGwei = BigNumber.from("1000000000");
const oneEther = BigNumber.from("1000000000000000000");

//_result:
formatUnits(oneGwei, 0);
//_log:

//_result:
formatUnits(oneGwei, "gwei");
//_log:

//_result:
formatUnits(oneGwei, 9);
//_log:

//_result:
formatUnits(oneEther);
//_log:

//_result:
formatUnits(oneEther, 18);
//_log:

_property: ethers.utils.formatEther(value) => string  @<utils-formatEther> @SRC<units>
等价于调用``formatUnits(value, "ether")``。

_code: @lang<javascript>

//_hide: const formatEther = ethers.utils.formatEther;
//_hide: const BigNumber = ethers.BigNumber;

const value = BigNumber.from("1000000000000000000");

//_result:
formatEther(value);
//_log:

_property: ethers.utils.parseUnits(value [ , unit = "ether" ] ) => [BigNumber](BigNumber)  @<utils-parseUnits> @SRC<units>
返回[BigNumber](BigNumber)表示的值，
如果是数字number指定，则解析为对应的小数位数；
如果是字符串string指定，则解析为 string name 对应的单位。

_code: @lang<javascript>

//_hide: const parseUnits = ethers.utils.parseUnits;

//_result:
parseUnits("1.0");
//_log:

//_result:
parseUnits("1.0", "ether");
//_log:

//_result:
parseUnits("1.0", 18);
//_log:

//_result:
parseUnits("121.0", "gwei");
//_log:

//_result:
parseUnits("121.0", 9);
//_log:

_property: ethers.utils.parseEther(value) => [BigNumber](BigNumber)  @<utils-parseEther> @SRC<units>
等价于调用``parseUnits(value, "ether")``。

_code: @lang<javascript>

//_hide: const parseEther = ethers.utils.parseEther;

//_result:
parseEther("1.0");
//_log:

//_result:
parseEther("-0.5");
//_log:
