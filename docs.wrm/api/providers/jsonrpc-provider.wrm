_section: JsonRpcProvider  @<JsonRpcProvider> @INHERIT<[[Provider]]> @SRC<providers:class.JsonRpcProvider>

[JSON-RPC API](link-jsonrpc)是与以太坊交互比较流行的方法，在主要的以太坊节点实现(如[[link-geth]] 和 [[link-parity]])以及许多第三方web服务(如[[link-infura]])中都可以用。

_property: new ethers.providers.JsonRpcProvider([ urlOrConnectionInfo [ , networkish ] ])  @SRC<providers:constructor.JsonRpcProvider>
使用 URL 或者 [[ConnectionInfo]] //urlOrConnectionInfo// 作为一个一个 JSON-RPC HTTP API 连接到 //networkish// 网络。

如果 //urlOrConnectionInfo// 没有被指定， 默认值是``http:/\/localhost:8545``。
如果网络没有被指定， 它将会自动使用 ``eth_chaindId``查询网络节点并返回 ``eth_networkId``从而确定网络。

_note: 注意: 连接到本地节点
每个节点的实现略有不同，可能需要特定的命令行标志、配置或UI设置，以启用JSON-RPC、解锁帐户或公开特定的api。请参考他们的文档。

_property: jsonRpcProvider.getSigner([ addressOrIndex ]) => [[JsonRpcSigner]]  @<JsonRpcProvider-getSigner> @SRC<providers/json-rpc-provider>
返回一个由该以太坊节点管理的[[JsonRpcSigner]]，地址为//addressOrIndex//。如果没有提供//addressOrIndex//，则使用第一个帐户(account #0)。

_property: jsonRpcProvider.getUncheckedSigner([ addressOrIndex ]) => [[UncheckedJsonRpcSigner]]  @<JsonRpcProvider-getUncheckedSigner> @SRC<providers/json-rpc-provider>

_property: jsonRpcProvider.listAccounts() => Promise<Array<string>>  @<JsonRpcProvider-listAccounts> @SRC<providers/json-rpc-provider>
返回此provider管理的所有帐户地址的列表。

_property: jsonRpcProvider.send(method, params) => Promise<any>  @<JsonRpcProvider-send> @SRC<providers/json-rpc-provider>
允许向provider发送原始消息。

这可以用于后端特定的调用，比如调试或特定的帐户管理。

_subsection: JsonRpcSigner  @<JsonRpcSigner> @INHERIT<[[Signer]]> @SRC<providers:class.JsonRpcSigner>
**JsonRpcSigner**是一个简单的Signer，它由一个连接的[[JsonRpcProvider]]支持。

_property: signer.provider => [[JsonRpcProvider]]
创建这个signer的provider

_property: signer.connectUnchecked() => [[UncheckedJsonRpcSigner]]  @<JsonRpcSigner-connectUnchecked> @SRC<providers>
返回一个新的Signer对象，该对象在发送交易时不执行额外的检查。详情请参阅[getUncheckedSigner](JsonRpcProvider-getUncheckedSigner)。

_property: signer.sendUncheckedTransaction(transaction) => Promise<string<[[DataHexString]]\<32>\>>  @<JsonRpcSigner-sendUncheckedTransaction> @SRC<providers>
发送//交易//并返回一个解析为不透明交易哈希的Promise。

_property: signer.unlock(password) => Promise<boolean>  @<JsonRpcSigner-unlock> @SRC<providers>
Request the node unlock the account (if locked) using //password//.
使用//密码//请求节点解除锁定（如果被锁了）。

_subsection: JsonRpcUncheckedSigner  @<UncheckedJsonRpcSigner> @INHERIT<[[Signer]]> @SRC<providers:class.UncheckedJsonRpcSigner>
JSON-RPC API仅在发送交易时提供交易哈希作为响应，但ether Provider要求在返回交易之前填充交易的所有细节。
例如，燃料价格（gas price）和燃料限制（gas limit）可能由节点或自动包含在内的nonce调整，在这种情况下，不透明的交易哈希已经丢弃了这一点。

To remedy this, the [[JsonRpcSigner]] immediately queries the provider for
the details using the returned transaction hash to populate the [[providers-TransactionResponse]]
object.
为了解决这个问题，[[JsonRpcSigner]]立即查询provider的详细信息，用返回的交易哈希来填充[[providers-TransactionResponse]]对象。

一些后端不立即响应，直到区块被挖出，才发布它负责签署的交易的细节。

**UncheckedSigner**不填充任何附加信息，并将一个模拟的类似[[providers-TransactionResponse]]的对象作为立即返回的结果，
其中大部分属性设置为null，但如果只需要这些，则可以快速获得交易哈希。


_subsection: StaticJsonRpcProvider @<StaticJsonRpcProvider> @INHERIT<[[JsonRpcProvider]]> @SRC<providers:class.StaticJsonRpcProvider>

ethers Provider将频繁执行``getNetwork``调用，以确保网络调用和网络通信是一致的。

在像MetaMask这样的客户端情况下，这是需要的，因为用户可以随时改变网络，在这种情况下，检查chainId的成本是本地的，因此很便宜。

在像MetaMask这样的客户端情况下是非常有必要的，因为用户可能随时改变网络，
在这种情况下，检查chainId的成本是在本地的，因此很便宜。

众所周知，在某些情况下网络不能改变,如当连接到一个INFURA端点,在这种情况下,可以使用**SStaticJsonRpcProvider**来将一直缓存链ID,可以减少网络流量和往返查询chain ID的次数。

这个[[Provider]] **只**应在网络不能更改时使用。

_subsection: 节点特定的方法 @<JsonRpcProvider--other>

许多方法是不常见的或特定于某些以太坊节点(例如[Parity](link-parity) 与 [Geth](link-geth))才有的。这些方法包括帐户和管理员管理、调试、更深层次的区块和交易探索以及其他服务(如Swarm和Whisper)。

可以使用[jsonRpcProvider.send](JsonRpcProvider-send) 来获得这些方法。

- 大多数以太坊节点提供的[JSON-RPC 方法](link-json-rpc) (包括不常见的方法)
- [Parity's Trace Module](link-parity-trace) 可用于跟踪和调试EVM中执行的交易(需要自定义配置)
- [Geth's Debug Module](link-geth-debug) 调试交易和内部缓存状态等。
- [Additional Geth Methods](link-geth-rpc)
- [Additional Parity Methods](link-parity-rpc)
