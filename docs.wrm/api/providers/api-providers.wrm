_section: API Providers @<api-providers>

有很多服务都提供了访问以太坊区块链的web API。这些提供商允许连接到它们，因为你不需要运行你自己的实例或以太坊节点集群，这就简化了开发。

然而，这种对第三方服务的依赖会降低弹性和安全性，并增加所需的信任度。为了缓解这些问题，建议您使用
[Default Provider](providers-getDefaultProvider)。


_subsection: EtherscanProvider @<EtherscanProvider> @inherit<[[Provider]]> @src<providers:class.EtherscanProvider>

**EtherscanProvider**是由各种[Etherscan APIs](link-etherscan-api)的组合所支持。

_property: new ethers.providers.EtherscanProvider([ network = "homestead", [ apiKey ] ])
使用可选的//apiKey//创建一个新的**EtherscanProvider**连接到//网络//。

这个//网络//可以被指定为一个**字符串**类型的网络名称、或**number**类型的链ID，或[网络对象]provider-(network)。

如果没有提供//apiKey//，将使用一个共享的API key，这可能会导致性能降低和请求受限。
强烈推荐在生产环境中使用您在[Etherscan](link-etherscan)上注册的API密钥。

_note: 注意: 默认的 API keys
如果没有提供//apiKey//，将使用一个共享的API key，这可能会导致性能降低和请求受限。

强烈推荐在生产环境中使用您在[Etherscan](link-etherscan)上注册的API密钥。

_definition: **支持的网络**

- homestead - Homestead (Mainnet)
- goerli - Görli (clique testnet)
- sepolia - Sepolia (proof-of-authority testnet)
- arbitrum - Arbitrum Optimistic L2
- arbitrum-goerli - Arbitrum Optimistic L2 testnet
- matic - Polgon mainnet
- maticmum - Polgon testnet
- optimism - Optimism Optimistic L2
- optimism-goerli - Optimism Optimistic L2 testnet


_code: Etherscan 例子 @lang<javascript>

//_hide: const EtherscanProvider = ethers.providers.EtherscanProvider;
//_hide: const apiKey = "...";

// 连接主网 (homestead)
provider = new EtherscanProvider();

// 连接 rinkeby 测试网(以下这两种方式是等价的)
provider = new EtherscanProvider("goerli");
provider = new EtherscanProvider(5);

network = ethers.providers.getNetwork("goerli");
//_hide: delete network._defaultProvider;
//_log: network

provider = new EtherscanProvider(network);

// 通过API key 连接主网(homestead)
provider = new EtherscanProvider(null, apiKey);
provider = new EtherscanProvider("homestead", apiKey);


_property: provider.getHistory(address) => Array<History> @src<providers>
@TODO... Explain


_subsection: InfuraProvider @<InfuraProvider> @INHERIT<[[UrlJsonRpcProvider]]> @src<providers:class.InfuraProvider>

**InfuraProvider** 被流行的[INFURA](link-infura)以太坊服务所支持。

_property: new ethers.providers.InfuraProvider([ network = "homestead", [ apiKey ] ]) @SRC<providers>
使用可选的//apiKey//创建一个新的**InfuraProvider**连接到//网络//。

这个//网络//可以被指定为一个**字符串**类型的网络名称、或**number**类型的链ID，或[网络对象]provider-(network)。

//apiKey//可以是一个**string**类型的Project ID，也可以是一个带有``projectId``和``projectSecret``属性**对象**，
用于指定一个可以在非公共源(如服务器)上使用的[Project Secret](link-infura-secret)，
以进一步保护你的API access 和 quotas。

_property: InfuraProvider.getWebSocketProvider([ network [ , apiKey ] ]) => [[WebSocketProvider]] @<InfuraProvider-getWebSocketProvider> @SRC<providers:InfuraProvider.getWebSocketProvider>
Create a new [[WebSocketProvider]] 使用 INFURA web-socket 端点创建一个新的[[WebSocketProvider]]，并使用可选的//apiKey//连接到网络。
网络和apiKey的设定与构造函数相同。

//网络// 和 //apiKey// 的设定与[构造函数](InfuraProvider)相同。

_note: 注意: 默认的 API keys
如果没有提供//apiKey//，将使用一个共享的API key，这可能会导致性能降低和请求受限。

强烈推荐在生产环境中使用您通过[INFURA](link-infura)注册的API密钥。

_definition: **支持的网络**

- homestead - Homestead (Mainnet)
- goerli - Görli (clique testnet)
- sepolia - Sepolia (proof-of-authority testnet)
- arbitrum - Arbitrum Optimistic L2
- arbitrum-goerli - Arbitrum Optimistic L2 testnet
- matic - Polgon mainnet
- maticmum - Polgon testnet
- optimism - Optimism Optimistic L2
- optimism-goerli - Optimism Optimistic L2 testnet

_code: INFURA 例子 @lang<javascript>

//_hide: const InfuraProvider = ethers.providers.InfuraProvider;
//_hide: const projectId = "...";
//_hide: const projectSecret = "...";

// 连接到主网 (homestead)
provider = new InfuraProvider();

// 连接到 goerli 测试网
// (see EtherscanProvider above for other network examples)
provider = new InfuraProvider("goerli");

// 使用一个Project ID连接到主网(以下这两种方式是等价的)
provider = new InfuraProvider(null, projectId);
provider = new InfuraProvider("homestead", projectId);

// 使用Project ID 和 Project Secret 连接到主网
provider = new InfuraProvider("homestead", {
    projectId: projectId,
    projectSecret: projectSecret
});

// 使用一个 WebSocketProvider 连接到 INFURA WebSocket 端点
provider = InfuraProvider.getWebSocketProvider()
//_hide: await provider.destroy();


_subsection: AlchemyProvider @<AlchemyProvider> @inherit<[[UrlJsonRpcProvider]]> @src<providers:class.AlchemyProvider>

**AlchemyProvider** 是被[Alchemy](link-alchemy)所支持的。

_property: new ethers.providers.AlchemyProvider([ network = "homestead", [ apiKey ] ])
通过可选的//apiKey//创建一个新的**AlchemyProvider** 连接到//网络//。

这个//网络//可以被指定为一个**字符串**类型的网络名称、或**number**类型的链ID，或[网络对象]provider-(network)。

_note: 注意: 默认的 API keys
如果没有提供//apiKey//，将使用一个共享的API key，这可能会导致性能降低和请求受限。

强烈推荐在生产环境中使用您通过[Alchemy](link-alchemy) 注册的API密钥。

_definition: **支持的网络**

- homestead - Homestead (Mainnet)
- goerli - Görli (clique testnet)
- sepolia - Sepolia (proof-of-authority testnet)
- arbitrum - Arbitrum Optimistic L2
- arbitrum-goerli - Arbitrum Optimistic L2 testnet
- matic - Polgon mainnet
- maticmum - Polgon testnet
- optimism - Optimism Optimistic L2
- optimism-goerli - Optimism Optimistic L2 testnet

_code: Alchemy Examples @lang<javascript>

//_hide: const AlchemyProvider = ethers.providers.AlchemyProvider;
//_hide: const apiKey = "...";

// 连接到主网(homestead)
provider = new AlchemyProvider();

// 连接到 goerli 测试网
// (see EtherscanProvider above for other network examples)
provider = new AlchemyProvider("goerli");

// 使用 apiKey 连接到主网(以下这两种方式是等价的)
provider = new AlchemyProvider(null, apiKey);
provider = new AlchemyProvider("homestead", apiKey);

// 使用一个 WebSocketProvider 连接到 Alchemy WebSocket 端点
provider = AlchemyProvider.getWebSocketProvider()
//_hide: provider.destroy();


_subsection: CloudflareProvider @<CloudflareProvider> @inherit<[[UrlJsonRpcProvider]]> @src<providers:class.CloudflareProvider>

CloudflareProvider 是被 [Cloudflare Ethereum Gateway](link-cloudflare)所支持的。

_property: new ethers.providers.CloudflareProvider()
创建一个新的**CloudflareProvider** 连接到主网(homestead)。

_definition: **支持的网络**

- Homestead (主网)

_code: Cloudflare 例子 @lang<javascript>

//_hide: const CloudflareProvider = ethers.providers.CloudflareProvider;

// 连接到主网(homestead)
provider = new CloudflareProvider();
