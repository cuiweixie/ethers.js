_section: Provider @<Provider>

在ethers里面，**Provider** 是访问区块链数据的只读抽象。

_note: 使用过 Web3.js吗?
如果你用过Web3.js，以下是与ethers.js最大不同点。

ethers library 在 **Provider**和[[Signer]]可执行的操作之间创建了一个强大的划分，而Web3.js将二者结合在一起。

这种划分的关注点在于Provider严格的操作子集允许更多的后端、更一致的API，并确保其他库可以在不依赖任何潜在假设的情况下运行。

_subsection: 账户的方法  @<Provider--account-methods>

_property: provider.getBalance(address [ , blockTag = latest ]) => Promise<[[BigNumber]]>  @<Provider-getBalance> @SRC<providers/base-provider>
返回给定的//blockTag// 区块高度下//地址//的余额。

_code: @lang<javascript>

//_result:
await provider.getBalance("ricmoo.eth");
//_log:

_property: provider.getCode(address [ , blockTag = latest ]) => Promise<string<[[DataHexString]]>>  @<Provider-getCode> @SRC<providers/base-provider>
返回给定的//blockTag// 区块高度下的合约源代码，如果当前没有合约被部署， 将返回 ``0x``。

_code: @lang<javascript>

//_result:
await provider.getCode("registrar.firefly.eth");
//_log:

_property: provider.getStorageAt(addr, pos [ , blockTag = latest ]) => Promise<string<[[DataHexString]]>>  @<Provider-getStorageAt> @SRC<providers/base-provider>
在当前的//blockTag//下，输入address参数addr和position参数pos，返回类型为``Bytes32``的值。

_code: @lang<javascript>

//_result:
await provider.getStorageAt("registrar.firefly.eth", 0)
//_log:

_property: provider.getTransactionCount(address [ , blockTag = latest ]) => Promise<number>  @<Provider-getTransactionCount> @SRC<providers/base-provider>
在当前的//blockTag//下，返回已经发送的交易的数量，这个值是用来提供给**发送**到网络的下一个交易的nonce值。

_code: @lang<javascript>

//_result:
await provider.getTransactionCount("ricmoo.eth");
//_log:


_subsection: 区块的方法  @<Provider--block-methods>

_property: provider.getBlock(block) => Promise<[[providers-Block]]>  @<Provider-getBlock> @SRC<providers/base-provider>
从网络中得到//区块//， ``result.transactions`` 是一串交易集合的哈希值。

_code: @lang<javascript>

//_result:
await provider.getBlock(100004)
//_log:

_property: provider.getBlockWithTransactions(block) => Promise<[[providers-BlockWithTransactions]]>  @<Provider-getBlockWithTransactions> @SRC<providers/base-provider>
从网络中得到//区块//， ``result.transactions`` 是 一个[[providers-TransactionResponse]] 对象的数组集合。

_code: @lang<javascript>

//_result:
await provider.getBlockWithTransactions(100004)
//_log:

_subsection: 以太坊域名服务 (ENS) 方法 @<Provider--ens-methods>

[以太坊域名服务](link-ens) (ENS) 允许一个简短且易于记忆的ENS名称附加到任何一组键和值。

最常见的用法之一是使用一个简单的命名来引用[以太坊地址](address)。

在ethers的 API中，几乎任何接受地址的地方都可以使用ENS命名，这可以简化代码，使读取和调试更加简单。

provider 提供了一些基本操作，以帮助解析和处理ENS命名。

_property: provider.getResolver(name) => Promise<[[EnsResolver]]>
返回一个EnsResolver实例，该实例可用于进一步查询ENS命名的特定实体。

_code: @lang<javascript>

//_hide: provider = ethers.getDefaultProvider();

// 有关使用此对象的示例，请参见下面(Resolver)
const resolver = await provider.getResolver("ricmoo.eth");

//_hide: _page.resolver = resolver;

_property: provider.lookupAddress(address) => Promise<string>  @<Provider-lookupAddress> @SRC<providers/base-provider>
使用//反向注册器//对ENS中的地址进行反向查找。如果名称不存在，或者正向查找不匹配，则返回``null``。

ENS名称需要额外的配置来设置反向记录，它们不会自动设置。

_code: @lang<javascript>

//_result:
await provider.lookupAddress("0x5555763613a12D8F3e73be831DFf8598089d3dCa");
//_log:

_property: provider.resolveName(name) => Promise<string<[Address](address)>>  @<Provider-ResolveName> @SRC<providers/base-provider>
查找一个//名称//的地址。如果这个//名称//没有被拥有，或者没有配置一个解析器，或者解析器没有配置一个地址，则返回``null``。

_code: @lang<javascript>

//_result:
await provider.resolveName("ricmoo.eth");
//_log:


_subsection: EnsResolver @<EnsResolver> 

_property: resolver.name => string
Resolver 的名称

_property: resolver.address => string<[[address]]>
Resolve 的地址

_property: resolver.getAddress([ cointType = 60 ]) => Promise<string>
返回一个 解析的类型为[[link-eip-2304]] //多币地址//的 Promise。
默认情况下，返回一个以太坊的[[address]](``coinType = 60``)。

_code: @lang<javascript>

//_hide: const resolver = _page.resolver;

// 默认情况下，查找以太坊地址
// (这个会 match provider.resolveName)
//_result:
await resolver.getAddress();
//_log:

// 为其他coin地址指定coinType (0 = Bitcoin)
//_result:
await resolver.getAddress(0);
//_log:

_property: resolver.getContentHash() => Promise<string>
返回一个Promise，解析为任何存储的[[link-eip-1577]]内容哈希。 [[link-eip-1577]]。

_code: @lang<javascript>

//_hide: const resolver = _page.resolver;

//_result:
await resolver.getContentHash();
//_log:

_property: resolver.getText(key) => Promise<string>
返回一个Promise，解析为任何存储的[[link-eip-634]]作为key的文本实体。

_code: @lang<javascript>

//_hide: const resolver = _page.resolver;

//_result:
await resolver.getText("email");
//_log:

//_result:
await resolver.getText("url");
//_log:

//_result:
await resolver.getText("com.twitter");
//_log:

_subsection: Logs 方法  @<Provider--log-methods>

_property: provider.getLogs(filter) => Promise<Array<[[providers-Log]]>>  @<Provider-getLogs> @SRC<providers/base-provider>
返回匹配筛选器的 [[providers-Log]]数组。

请记住，许多后端会丢弃旧的事件，并且请求范围太广可能也会被丢弃，因为它们需要太多的资源来执行查询。


_subsection: Network Status Methods  @<Provider--network-methods>

_property: provider.getNetwork() => Promise<[[providers-Network]]>  @<Provider-getNetwork> @SRC<providers/base-provider:method.BaseProvider.getNetwork>
返回这个 Provider 所连接的 [[providers-Network]]。

_code: @lang<javascript>

//_result:
await provider.getNetwork()
//_hide: _ = utils.shallowCopy(_);
//_hide: delete _._defaultProvider;
//_log:

_property: provider.getBlockNumber() => Promise<number>  @<Provider-getBlockNumber> @SRC<providers/base-provider>
返回最近挖出的区块的序号(或高度)。

_code: @lang<javascript>

//_result:
await provider.getBlockNumber()
//_log:

_property: provider.getGasPrice() => Promise<[[BigNumber]]>  @<Provider-getGasPrice> @SRC<providers/base-provider>
返回一个 关于这个交易中的 [[gas-price]]的//最准预测//。

_code: @lang<javascript>

// 燃料价格 (单位： wei)...
gasPrice = await provider.getGasPrice()
//_log: gasPrice

// 通常来说燃料的价格用 gwei 会更好理解
//_result:
utils.formatUnits(gasPrice, "gwei")
//_log:

_property: provider.getFeeData() => Promise<[[providers-FeeData]]>  @<Provider-getFeeData> @SRC<abstract-provider>
返回在一笔交易中当前的recommended [[providers-FeeData]]。

对于 EIP-1559 的交易, 应该使用 ``maxFeePerGas`` 和 ``maxPriorityFeePerGas``。

对于不支持 EIP-1559 中被遗留的交易和网络，应该使用 ``gasPrice``。

_code: @lang<javascript>

// 燃料价格 (单位： wei)...
feeData = await provider.getFeeData()
//_log: feeData

// 通常来说燃料的价格用 gwei 会更好理解
//_result:
utils.formatUnits(feeData.maxFeePerGas, "gwei")
//_log:

_property: provider.ready => Promise<[[providers-Network]]> @<Provider-ready> @src<providers/base-provider>
返回一个 Promise ，直到网络建立就失效，，忽略由于目标节点还未激活而出现的错误。
这可以用于测试或附上脚本，以等待节点启动并顺利运行。

_subsection: Transactions 方法  @<Provider--transaction-methods>

_property: provider.call(transaction [ , blockTag = latest ]) => Promise<string<[[DataHexString]]>>  @<Provider-call> @SRC<providers/base-provider>
使用//call//返回执行//交易//的结果。调用不需要任何的以太，但不能改变任何状态。这在合约上调用getter方法是非常有用的。

_code: @lang<javascript>

//_result:
await provider.call({
  // ENS public resovler address
  to: "0x4976fb03C32e5B8cfe2b6cCB31c09Ba78EBaBa41",

  // `function addr(namehash("ricmoo.eth")) view returns (address)`
  data: "0x3b3b57debf074faa138b72c65adbdcfb329847e4f2c04bde7f7dd7fcad5a52d2f395a558"
});
//_log:

_property: provider.estimateGas(transaction) => Promise<[[BigNumber]]>  @<Provider-estimateGas> @SRC<providers/base-provider>
Returns an estimate of the amount of gas that would be required to submit //transaction//
返回向网络提交//交易//所需的预估燃料gas值。

An estimate may not be accurate since there could be another transaction
on the network that was not accounted for, but after being mined affected
relevant state.
估计的燃料gas值可能不准确，因为网络上可能有另一个交易没有被计算在内，但在被挖出来之后就会影响相关状态。

_code: @lang<javascript>

//_hide: const parseEther = ethers.utils.parseEther;

//_result:
await provider.estimateGas({
  // Wrapped ETH address
  to: "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",

  // `function deposit() payable`
  data: "0xd0e30db0",

  // 1 ether
  value: parseEther("1.0")
});
//_log:

_property: provider.getTransaction(hash) => Promise<[[providers-TransactionResponse]]> @<Provider-getTransaction> @src<providers/base-provider>
Returns the transaction with //hash// or null if the transaction is unknown.

If a transaction has not been mined, this method will search the transaction
pool. Various backends may have more restrictive transaction pool access (e.g.
if the gas price is too low or the transaction was only recently sent and not
yet indexed) in which case this method may also return null.
返回带有//哈希值//的交易，如果交易未知，则返回null。

如果一个交易还没有被挖出，这个方法将搜索交易池。各种后端可能有更多的限制交易池访问(例如，燃料价格太低或交易最近才发送，还没有索引)，在这种情况下，这个方法也可能返回null。
_code: @lang<javascript>

//_result:
await provider.getTransaction("0x5b73e239c55d790e3c9c3bbb84092652db01bb8dbf49ccc9e4a318470419d9a0");
//_log:

_property: provider.getTransactionReceipt(hash) => Promise<[[providers-TransactionReceipt]]> @<Provider-getTransactionReceipt> @src<providers/base-provider>
返回交易收据的//哈希值//，如果交易还没有被挖出则返回null。

如果需要等待交易被挖出，请考虑下面的``waitForTransaction``方法。

_code: @lang<javascript>

//_result:
await provider.getTransactionReceipt("0x5b73e239c55d790e3c9c3bbb84092652db01bb8dbf49ccc9e4a318470419d9a0");
//_log:

_property: provider.sendTransaction(transaction) => Promise<[[providers-TransactionResponse]]>  @<Provider-sendTransaction> @SRC<providers/base-provider>
向在挖区块的网络提交//交易//。//交易// **必须** 经过签名，并且需要合法（例如，nonce值需要正确并且账户要有足够的余额来进行该笔交易的支付）。

_code: @lang<javascript>

//_hide: const provider = localProvider;
//_hide: const wallet = new ethers.Wallet(ethers.utils.id("HelloWorld"), provider);
//_hide: const fundTx = await localSigner.sendTransaction({
//_hide:   to: wallet.address,
//_hide:   value: ethers.utils.parseEther("2.0")
//_hide: });
//_hide: await fundTx.wait();
//_hide: const tx = await localSigner.populateTransaction({ to: "ricmoo.eth", value: ethers.utils.parseEther("3.14159") });
//_hide: const signedTx = await localSigner.signTransaction(tx);

//_verbatim: `const signedTx = ${ JSON.stringify(signedTx) };`
//_result:
await provider.sendTransaction(signedTx);
//_log:

_property: provider.waitForTransaction(hash [ , confirms = 1 [ , timeout ] ]) => Promise<[TxReceipt](providers-TransactionReceipt)>  @<Provider-waitForTransaction> @SRC<providers/base-provider>
Returns a Promise which will not resolve until //transactionHash// is mined.
返回一个Promise，直到transactionHash被挖出来，才能够被解析。

如果//confirms//参数为0，这个方法是非阻塞的，如果交易还没有被挖出，则返回null。
否则，该方法是阻塞的，直到这个包含该交易的、被//confirms//标识的区块被挖出。

_subsection: Event Emitter 方法 @<Provider--event-methods>

EventEmitter API允许应用程序使用[[link-wiki-observer-pattern]]来注册各种事件发生时的回调函数。


这与其他JavaScript库提供的Event Emitter密切相关，除开那些事件名称支持一些更[复杂的对象](Provider--events)，而不仅仅是字符串。对象在内部是标准化的。


_property: provider.on(eventName, listener) => this  @<Provider-on> @SRC<providers/base-provider>
为每一个参数为//eventName//的 [事件](Provider--events)添加//监听器//。

_property: provider.once(eventName, listener) => this  @<Provider-once> @SRC<providers/base-provider>
为参数为//eventName//的 [事件](Provider--events)添加//监听器//，监听使用过后将会被移除。

_property: provider.emit(eventName, ...args) => boolean  @<Provider-emit> @SRC<providers/base-provider>
Notify all listeners of the //eventName// [event](Provider--events),
passing //args// to each listener. This is generally only used internally.
通知所有的//eventName// [event](Provider--events)监听器，并把参数传递给它们。这通常只在内部使用。
_property: provider.off(eventName [ , listener ]) => this  @<Provider-off> @SRC<providers/base-provider>
移除一个参数为//eventName//的[事件](Provider--events)//监听器//，如果没有提供//listener//参数，则移除所有关于//eventName//的监听器。

_property: provider.removeAllListeners([ eventName ]) => this  @<Provider-removeAllListeners> @SRC<providers/base-provider>
移除所有参数为//eventName//的[事件](Provider--events)监听器，如果没有提供//eventName//参数，则移除**所有**事件。

_property: provider.listenerCount([ eventName ]) => number  @<Provider-listenerCount> @SRC<providers/base-provider>
返回所有参数为//eventName//[事件](Provider--events)的监听器数量。如果没有提供//eventName//参数，返回所有监听器的数量。

_property: provider.listeners(eventName) => Array<Listener>  @<Provider-listeners> @SRC<providers/base-provider>
返回参数为//eventName//[事件](Provider--events)监听器的list集合。


_heading: 事件  @<Provider--events>

以下任何一个方法都可以作为上述方法中的//eventName//参数。

_definition: **Log Filter**

一个过滤器是一个对象，表示合约log Filter它具有可选的``address`` (合约地址) 和 ``topics`` (一个要匹配的主题集)。

如果参数``address``未被指定，则过滤器匹配任何合约地址。

有关于过滤事件的更多信息，请参阅 [EventFilters](providers-EventFilter)。

_definition: **Topic-Set Filter**

**主题集过滤器**的值是一个主题集数组。

此事件与日志过滤器相同，但参数``address``可以不用填(匹配任何合约)。

有关于过滤事件的更多信息，请参阅 [EventFilters](providers-EventFilter)。

_definition: **Transaction Filter**

**交易过滤器**的值是交易的哈希值。

这个事件会在任何给定的交易挖出的链上区块中触发。 使用[once](Provider-once)方法比使用[on](Provider-on)方法要普遍地多。

_null:

除了交易和过滤事件外，还有几个命名事件。

_table: Named Provider Events @style<full>

$Block:    当一个区块被挖出时触发
$Error:    只要有错误就触发
$Pending:  当一个新交易进入内存池时触发;只有特定的providers提供此事件，从而在运行在自己的节点上获得可靠的数据
$WillPoll: 在一个polling loop开始之前触发;//(大多数开发者很少使用)//
$DidPoll:  在polling loop中的所有事件被触发后触发;(//大多数开发者很少使用//)
$Poll:     在每个poll cycle中，`blockNumber`更新之后(如果改变了)，以及与在poll loop中任何其他的事件(如果有)之前触发;
           //(大多数开发者很少使用)//
$Debug:    每个Provider可以使用它来发出有用的调试信息，格式由开发者决定;//(大多数开发者很少使用)//


           //(very rarely used by most developers)//

|   **Event Name**    |  **Arguments**                   <|   **Description**  <<<|
|    ``"block"``      |   //blockNumber//                <| $Block             <<<|
|    ``"error"``      |   //error//                      <| $Error             <<<|
|    ``"pending"``    |   //pendingTransaction//         <| $Pending           <<<|
|    ``"willPoll"``   |   //pollId//                     <| $WillPoll          <<<|
|    ``"poll"``       |   //pollId//, //blockNumber//    <| $Poll              <<<|
|    ``"didPoll"``    |   //pollId//                     <| $DidPoll           <<<|
|    ``"debug"``      |   provider dependent             <| $Debug             <<<|


_code: 事件例子 @lang<javascript>

//_hide: const txHash = utils.id("dummy-data");
//_hide: const myAddress = ethers.constants.HashZero;
//_hide: const myOtherAddress = ethers.constants.HashZero;
//_hide: const hexZeroPad = ethers.utils.hexZeroPad;

provider.on("block", (blockNumber) => {
    // 只有有一个区块改变就会触发
})


provider.once(txHash, (transaction) => {
    // 当含有交易的区块被挖出就会触发
})


// 这个过滤器也可以通过Contract或接口API生成。
// 如果不指定address，则默认匹配任何地址，
// 如果不指定topics，则默认匹配任何日志。
filter = {
    address: "dai.tokens.ethers.eth",
    topics: [
        utils.id("Transfer(address,address,uint256)")
    ]
}
provider.on(filter, (log, event) => {
    // 当 DAI token 发生转账时触发
})


// 注意，这是一个主题集数组，与使用没有address参数的过滤器相同(即匹配任何地址)
topicSets = [
    utils.id("Transfer(address,address,uint256)"),
    null,
    [
        hexZeroPad(myAddress, 32),
        hexZeroPad(myOtherAddress, 32)
    ]
]
provider.on(topicSets, (log, event) => {
    // 当任何一个token 发送到其他地址时触发
})


provider.on("pending", (tx) => {
    // 当有一笔pending交易被捕获时触发
});


provider.on("error", (tx) => {
    // 只要有错误就会触发
});

//_hide: provider.removeAllListeners() /* Make sure the docs build without waiting forever */

_subsection: 校验方法  @<Provider--inspection-methods>

_property: Provider.isProvider(object) => boolean  @<Provider-isProvider> @SRC<abstract-provider>
当且仅当参数//object//是Provider返回 true 。

