_section: 开始使用 @<getting-started>


_subsection: 安装 @<installing>

以太坊中各种类和函数都可以从[@ethersproject](link-ethers-npm)下的子库中手动进行导入，但对于大多数项目来说，用完整的总库是最简单的入门方式。

_code: @lang<shell>

/home/ricmoo> npm install --save ethers


_subsection: 导入 @<importing>

_heading: Node.js

_code: node.js 是必须的 @lang<script>

const { ethers } = require("ethers");

_code: ES6 或 TypeScript @lang<script>

import { ethers } from "ethers";


_heading: Web 浏览器

出于安全，通常较好的方式是将这个库复制到你的web服务器中来进行各种操作。

但对于想进行快速用例和原型展示，你可以将我们的CDN加载到你的web应用程序中。


_code: 在浏览器中通过ES6的方式 @lang<html>

<script type="module">
    import { ethers } from "https://cdn.ethers.io/lib/ethers-5.2.esm.min.js";
    // Your code here...
</script>


_code: 在浏览器中通过ES3 (UMD)的方式 @lang<html>

<script src="https://cdn.ethers.io/lib/ethers-5.2.umd.min.js"
        type="application/javascript"></script>


_subsection: 常见的术语 @<getting-started--glossary>

这部分仍会不断地完善...

_table: Common Terms

$Provider:  Provider（提供者）是一个用于连接以太坊网络的抽象类，提供了通过只读方式的来连接区块链网络和获取其状态的桥梁。
$Signer:  Signer（签名器）通常是以某种方式直接或间接访问私钥，它可以签名消息和在已授权网络中管理你的账户中的以太币来进行交易。
$Contract:  Contract（合约）是一个运行在以太坊网络上表示现实中特定合约的抽象，应用可以像使用JavaScript对象一样使用它。


| **Provider**     | $Provider      |
| **Signer**       | $Signer        |
| **Contract**     | $Contract      |


_subsection: 连接以太坊: MetaMask @<getting-started--connecting>

在以太坊上去开发和测试的最快、最简单的方法是使用[[link-metamask]], 它是一个基于浏览器的扩展程序，提供了:

- 连接以太坊网络 (a [[Provider]])
- 保存你的私钥并且可以签名 (a [[Signer]])

_code: 连接 MetaMask @lang<script>

// A Web3Provider wraps a standard Web3 provider, which is
// what MetaMask injects as window.ethereum into each page
const provider = new ethers.providers.Web3Provider(window.ethereum)

// The MetaMask plugin also allows signing transactions to
// send ether and pay to change state within the blockchain.
// For this, you need the account signer...
const signer = provider.getSigner()

_subsection: 连接以太坊: RPC @<getting-started--connecting-rpc>

[JSON-RPC API](link-jsonrpc) 另一种与以太坊交互的比较流行的方式，用在所有主要的以太坊节点
(如 [[link-geth]] 和 [[link-parity]]) 以及许多第三方web服务 (如 [[link-infura]])。 它通常提供了:

- 连接以太坊网络 ([[Provider]])
- 保存你的私钥并且可以签名 ([[Signer]])

_code: 连接一个 RPC 客户端 @lang<script>

// If you don't specify a //url//, Ethers connects to the default 
// (i.e. ``http:/\/localhost:8545``)
const provider = new ethers.providers.JsonRpcProvider();

// The provider also allows signing transactions to
// send ether and pay to change state within the blockchain.
// For this, we need the account signer...
const signer = provider.getSigner()

_heading: 查询区块链 @<getting-started--querying>

当你有了[[Provider]]之后, 你就可以通过只读的方式连接区块链, 此外，你还可以使用它来查询当前状态、获取历史日志、查找部署的代码等等。

_code: 基础查询 @lang<javascript>

// Look up the current block number
//_result:
await provider.getBlockNumber()
//_log:

// Get the balance of an account (by address or ENS name, if supported by network)
//_result:
balance = await provider.getBalance("ethers.eth")
//_log:

// Often you need to format the output to something more user-friendly,
// such as in ether (instead of wei)
//_result:
ethers.utils.formatEther(balance)
//_log:

// If a user enters a string in an input field, you may need
// to convert it from ether (as a string) to wei (as a BigNumber)
//_result:
ethers.utils.parseEther("1.0")
//_log:


_heading: 写入区块链 @<getting-started--sending>

_code: 发送 Ether @lang<script>

// Send 1 ether to an ens name.
const tx = signer.sendTransaction({
    to: "ricmoo.firefly.eth",
    value: ethers.utils.parseEther("1.0")
});


_subsection: 合约 @<getting-started--contracts>

合约是基于以太坊区块链中程序代码的抽象。

[合约](Contract)对象使得链上的合约可以简单地作为一个普通的JavaScript对象, 通过映射的方法来编码和解码数据。

如果你熟悉数据库, 你会发现这与//对象关系映射器// (ORM)是相似的。

为了与链上的合约进行通信，这个类需要知道哪些方法是可用的，以及如何编码和解码数据，这些通过//应用程序二进制接口// (ABI)来提供。

这个类是一个 //元类（meta-class）//, 这意味着它的方法是在运行时构造的, 当你将ABI传递给构造函数时，它来确定要添加哪些方法。

尽管链上的合约有许多可用的方法，但是你可以安全地忽略你认为不需要或者不使用的方法，这样合约里面的ABI就是一个较小的子集。

ABI通常来自于Solidity或Vyper编译器，但是你可以在代码中使用可读的ABI，如下例所示：

_code: 连接 DAI 合约 @lang<javascript>

// You can also use an ENS name for the contract address
const daiAddress = "dai.tokens.ethers.eth";

// The ERC-20 Contract ABI, which is a common contract interface
// for tokens (this is the Human-Readable ABI format)
const daiAbi = [
  // Some details about the token
  "function name() view returns (string)",
  "function symbol() view returns (string)",

  // Get the account balance
  "function balanceOf(address) view returns (uint)",

  // Send some of your tokens to someone else
  "function transfer(address to, uint amount)",

  // An event triggered whenever anyone transfers to someone else
  "event Transfer(address indexed from, address indexed to, uint amount)"
];

// The Contract object
const daiContract = new ethers.Contract(daiAddress, daiAbi, provider);

//_hide: _page.daiAbi = daiAbi;
//_hide: _page.daiContract = daiContract;

_heading: 只读方法 @<getting-started--reading>

_code: 查询 DAI 合约 @lang<javascript>

//_hide: const daiContract = _page.daiContract;

// Get the ERC-20 token name
//_result:
await daiContract.name()
//_log:

// Get the ERC-20 token symbol (for tickers and UIs)
//_result:
await daiContract.symbol()
//_log:

// Get the balance of an address
balance = await daiContract.balanceOf("ricmoo.firefly.eth")
//_log: balance

// Format the DAI for displaying to the user
//_result:
ethers.utils.formatUnits(balance, 18)
//_log:


_heading: 改变状态的方法 @<getting-started--writing>

_code: 发送 DAI @lang<script>

// The DAI Contract is currently connected to the Provider,
// which is read-only. You need to connect to a Signer, so
// that you can pay to send state-changing transactions.
const daiWithSigner = contract.connect(signer);

// Each DAI has 18 decimal places
const dai = ethers.utils.parseUnits("1.0", 18);

// Send 1 DAI to "ricmoo.firefly.eth"
tx = daiWithSigner.transfer("ricmoo.firefly.eth", dai);


_heading: 监听事件 @<getting-started--events>

_code: 监听事件 @lang<javascript>

//_hide: const daiContract = _page.daiContract;
//_hide: const formatEther = ethers.utils.formatEther;

// Receive an event when ANY transfer occurs
daiContract.on("Transfer", (from, to, amount, event) => {
    console.log(`${ from } sent ${ formatEther(amount) } to ${ to}`);
    // The event object contains the verbatim log data, the
    // EventFragment and functions to fetch the block,
    // transaction and receipt and event functions
});

// A filter for when a specific address receives tokens
myAddress = "0x8ba1f109551bD432803012645Ac136ddd64DBA72";
filter = daiContract.filters.Transfer(null, myAddress)
//_log: filter

// Receive an event when that filter occurs
daiContract.on(filter, (from, to, amount, event) => {
    // The to will always be "address"
    console.log(`I got ${ formatEther(amount) } from ${ from }.`);
});

//_hide: daiContract.removeAllListeners(); /* Don't want to block the docs from compiling... */


_heading: 查询历史事件 @<getting-started--history>

_code: 过滤历史事件 @lang<javascript>

//_hide: const signer = new ethers.VoidSigner("0x8ba1f109551bD432803012645Ac136ddd64DBA72");
//_hide: const daiContract = _page.daiContract;

// Get the address of the Signer
myAddress = await signer.getAddress()
//_log: myAddress

// Filter for all token transfers from me
filterFrom = daiContract.filters.Transfer(myAddress, null);
//_log: filterFrom

// Filter for all token transfers to me
filterTo = daiContract.filters.Transfer(null, myAddress);
//_log: filterTo

// List all transfers sent from me a specific block range
//_result:
await daiContract.queryFilter(filterFrom, 9843470, 9843480)
//_log:

//
// The following have had the results omitted due to the
// number of entries; but they provide some useful examples
//

// List all transfers sent in the last 10,000 blocks
await daiContract.queryFilter(filterFrom, -10000)

// List all transfers ever sent to me
await daiContract.queryFilter(filterTo)

_subsection: 签名消息 @<getting-started--signing>

_code: 签名消息 @lang<javascript>

//_hide: const signer = ethers.Wallet.createRandom();

// To sign a simple string, which are used for
// logging into a service, such as CryptoKitties,
// pass the string in.
signature = await signer.signMessage("Hello World");
//_log: signature

//
// A common case is also signing a hash, which is 32
// bytes. It is important to note, that to sign binary
// data it MUST be an Array (or TypedArray)
//

// This string is 66 characters long
message = "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"

// This array representation is 32 bytes long
messageBytes = ethers.utils.arrayify(message);
//_log: messageBytes

// To sign a hash, you most often want to sign the bytes
signature = await signer.signMessage(messageBytes)
//_log: signature
